{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1","program":"/home/fury/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","digest","--edition=2018","/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"block-buffer\"","--cfg","feature=\"core-api\"","--cfg","feature=\"default\"","--cfg","feature=\"mac\"","--cfg","feature=\"std\"","--cfg","feature=\"subtle\"","-C","metadata=c61a7d5451f25b19","-C","extra-filename=-c61a7d5451f25b19","--out-dir","/home/fury/Rust/apollo/goblin-army-solana-nft-staking-react/backend/staking_program/target/rls/debug/deps","-L","dependency=/home/fury/Rust/apollo/goblin-army-solana-nft-staking-react/backend/staking_program/target/rls/debug/deps","--extern","block_buffer=/home/fury/Rust/apollo/goblin-army-solana-nft-staking-react/backend/staking_program/target/rls/debug/deps/libblock_buffer-ac632ae521524795.rmeta","--extern","crypto_common=/home/fury/Rust/apollo/goblin-army-solana-nft-staking-react/backend/staking_program/target/rls/debug/deps/libcrypto_common-26cd88d9a7e3ab95.rmeta","--extern","generic_array=/home/fury/Rust/apollo/goblin-army-solana-nft-staking-react/backend/staking_program/target/rls/debug/deps/libgeneric_array-4b3cd778b572c97a.rmeta","--extern","subtle=/home/fury/Rust/apollo/goblin-army-solana-nft-staking-react/backend/staking_program/target/rls/debug/deps/libsubtle-d7ab407b5a5fdc9e.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/fury/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/fury/Rust/apollo/goblin-army-solana-nft-staking-react/backend/staking_program/target/rls/debug/deps/libdigest-c61a7d5451f25b19.rmeta"},"prelude":{"crate_id":{"name":"digest","disambiguator":[18198021373095352432,0]},"crate_root":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src","external_crates":[{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[8373705112501149482,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[16909867051943430517,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11260902004430380252,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[10608756751411298727,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","num":5,"id":{"name":"std","disambiguator":[12872056181829019095,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4369074810188542311,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12333111663820923515,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12748886438148098175,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[6627577059144635863,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15896330838049133250,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[2582212836281766037,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[4723863376138925013,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[2482912266844122781,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16993901708144586312,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[15622067442351408235,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[12927959315880918009,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[1763799641200411356,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[2454364557606196642,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[10980657607002924382,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","num":20,"id":{"name":"generic_array","disambiguator":[1073028785072075367,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","num":21,"id":{"name":"serde","disambiguator":[15198278077471077582,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","num":22,"id":{"name":"serde_derive","disambiguator":[7313136997057164943,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","num":23,"id":{"name":"typenum","disambiguator":[18190153633746893416,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","num":24,"id":{"name":"crypto_common","disambiguator":[12308971692002591509,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","num":25,"id":{"name":"block_buffer","disambiguator":[1934734921884845487,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","num":26,"id":{"name":"subtle","disambiguator":[7118613607296887452,0]}}],"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":0,"byte_end":10565,"line_start":1,"line_end":299,"column_start":1,"column_end":48}},"imports":[{"kind":"Use","ref_id":{"krate":24,"index":44},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":10920,"byte_end":10933,"line_start":9,"line_end":9,"column_start":25,"column_end":38},"alias_span":null,"name":"AlgorithmName","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":24,"index":18},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":10935,"byte_end":10940,"line_start":9,"line_end":9,"column_start":40,"column_end":45},"alias_span":null,"name":"Block","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":24,"index":26},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":10942,"byte_end":10955,"line_start":9,"line_end":9,"column_start":47,"column_end":60},"alias_span":null,"name":"BlockSizeUser","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":24,"index":34},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":10957,"byte_end":10971,"line_start":9,"line_end":9,"column_start":62,"column_end":76},"alias_span":null,"name":"OutputSizeUser","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":24,"index":42},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":10973,"byte_end":10978,"line_start":9,"line_end":9,"column_start":78,"column_end":83},"alias_span":null,"name":"Reset","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":758},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":11140,"byte_end":11161,"line_start":19,"line_end":19,"column_start":22,"column_end":43},"alias_span":null,"name":"CtVariableCoreWrapper","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":767},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":11184,"byte_end":11205,"line_start":20,"line_end":20,"column_start":22,"column_end":43},"alias_span":null,"name":"RtVariableCoreWrapper","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":395},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":11225,"byte_end":11234,"line_start":21,"line_end":21,"column_start":19,"column_end":28},"alias_span":null,"name":"CoreProxy","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":775},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":11236,"byte_end":11247,"line_start":21,"line_end":21,"column_start":30,"column_end":41},"alias_span":null,"name":"CoreWrapper","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":785},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":11270,"byte_end":11290,"line_start":22,"line_end":22,"column_start":21,"column_end":41},"alias_span":null,"name":"XofReaderCoreWrapper","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":25,"index":0},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2308,"byte_end":2320,"line_start":62,"line_end":62,"column_start":9,"column_end":21},"alias_span":null,"name":"block_buffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":24,"index":0},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2330,"byte_end":2343,"line_start":63,"line_end":63,"column_start":9,"column_end":22},"alias_span":null,"name":"crypto_common","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":508},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2370,"byte_end":2376,"line_start":65,"line_end":65,"column_start":25,"column_end":31},"alias_span":null,"name":"Digest","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":541},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2378,"byte_end":2387,"line_start":65,"line_end":65,"column_start":33,"column_end":42},"alias_span":null,"name":"DynDigest","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":507},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2389,"byte_end":2399,"line_start":65,"line_end":65,"column_start":44,"column_end":54},"alias_span":null,"name":"HashMarker","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":24,"index":52},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2450,"byte_end":2459,"line_start":67,"line_end":67,"column_start":25,"column_end":34},"alias_span":null,"name":"InnerInit","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":24,"index":73},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2461,"byte_end":2474,"line_start":67,"line_end":67,"column_start":36,"column_end":49},"alias_span":null,"name":"InvalidLength","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":24,"index":74},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2461,"byte_end":2474,"line_start":67,"line_end":67,"column_start":36,"column_end":49},"alias_span":null,"name":"InvalidLength","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":24,"index":22},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2476,"byte_end":2479,"line_start":67,"line_end":67,"column_start":51,"column_end":54},"alias_span":null,"name":"Key","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":24,"index":46},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2481,"byte_end":2488,"line_start":67,"line_end":67,"column_start":56,"column_end":63},"alias_span":null,"name":"KeyInit","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":24,"index":20},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2515,"byte_end":2521,"line_start":68,"line_end":68,"column_start":25,"column_end":31},"alias_span":null,"name":"Output","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":24,"index":34},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2523,"byte_end":2537,"line_start":68,"line_end":68,"column_start":33,"column_end":47},"alias_span":null,"name":"OutputSizeUser","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":24,"index":42},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2539,"byte_end":2544,"line_start":68,"line_end":68,"column_start":49,"column_end":54},"alias_span":null,"name":"Reset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":0},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2555,"byte_end":2568,"line_start":69,"line_end":69,"column_start":9,"column_end":22},"alias_span":null,"name":"generic_array","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":23,"index":2827},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2586,"byte_end":2592,"line_start":69,"line_end":69,"column_start":40,"column_end":46},"alias_span":null,"name":"consts","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":805},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2633,"byte_end":2641,"line_start":71,"line_end":71,"column_start":15,"column_end":23},"alias_span":null,"name":"CtOutput","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":609},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2643,"byte_end":2646,"line_start":71,"line_end":71,"column_start":25,"column_end":28},"alias_span":null,"name":"Mac","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":811},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2648,"byte_end":2656,"line_start":71,"line_end":71,"column_start":30,"column_end":38},"alias_span":null,"name":"MacError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":812},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2648,"byte_end":2656,"line_start":71,"line_end":71,"column_start":30,"column_end":38},"alias_span":null,"name":"MacError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":608},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2658,"byte_end":2667,"line_start":71,"line_end":71,"column_start":40,"column_end":49},"alias_span":null,"name":"MacMarker","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":0,"byte_end":10565,"line_start":1,"line_end":299,"column_start":1,"column_end":48},"name":"","qualname":"::","value":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":477},{"krate":0,"index":562},{"krate":0,"index":654},{"krate":0,"index":657},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":664},{"krate":0,"index":667},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":677},{"krate":0,"index":680},{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":687},{"krate":0,"index":690},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":697},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":704},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":710},{"krate":0,"index":713},{"krate":0,"index":716},{"krate":0,"index":720},{"krate":0,"index":723},{"krate":0,"index":726},{"krate":0,"index":729},{"krate":0,"index":736},{"krate":0,"index":740},{"krate":0,"index":749},{"krate":0,"index":826},{"krate":0,"index":828},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":833},{"krate":0,"index":752},{"krate":0,"index":754},{"krate":0,"index":835},{"krate":0,"index":837},{"krate":0,"index":839},{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":755},{"krate":0,"index":757}],"decl_id":null,"docs":" This crate provides traits which describe functionality of cryptographic hash\n functions and Message Authentication algorithms.","sig":null,"attributes":[{"value":"/ This crate provides traits which describe functionality of cryptographic hash","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":0,"byte_end":81,"line_start":1,"line_end":1,"column_start":1,"column_end":82}},{"value":"/ functions and Message Authentication algorithms.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":82,"byte_end":134,"line_start":2,"line_end":2,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":135,"byte_end":138,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ Traits in this repository are organized into the following levels:","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":139,"byte_end":209,"line_start":4,"line_end":4,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":210,"byte_end":213,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ - **High-level convenience traits**: [`Digest`], [`DynDigest`], [`Mac`].","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":214,"byte_end":290,"line_start":6,"line_end":6,"column_start":1,"column_end":77}},{"value":"/   Wrappers around lower-level traits for most common use-cases. Users should","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":291,"byte_end":371,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/   usually prefer using these traits.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":372,"byte_end":412,"line_start":8,"line_end":8,"column_start":1,"column_end":41}},{"value":"/ - **Mid-level traits**: [`Update`], [`FixedOutput`], [`FixedOutputReset`],","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":413,"byte_end":491,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/   [`ExtendableOutput`], [`ExtendableOutputReset`], [`XofReader`],","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":492,"byte_end":561,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/   [`VariableOutput`], [`VariableOutput`], [`Reset`], [`KeyInit`], and","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":562,"byte_end":635,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/   [`InnerInit`]. These traits atomically describe available functionality","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":636,"byte_end":713,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/   of an algorithm.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":714,"byte_end":736,"line_start":13,"line_end":13,"column_start":1,"column_end":23}},{"value":"/ - **Marker traits**: [`HashMarker`], [`MacMarker`]. Used to distinguish","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":737,"byte_end":812,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/   different algorithm classes.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":813,"byte_end":847,"line_start":15,"line_end":15,"column_start":1,"column_end":35}},{"value":"/ - **Low-level traits** defined in the [`core_api`] module. These traits","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":848,"byte_end":923,"line_start":16,"line_end":16,"column_start":1,"column_end":76}},{"value":"/   operate at a block-level and do not contain any built-in buffering.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":924,"byte_end":997,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"/   They are intended to be implemented by low-level algorithm providers only.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":998,"byte_end":1078,"line_start":18,"line_end":18,"column_start":1,"column_end":81}},{"value":"/   Usually they should not be used in application-level code.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":1079,"byte_end":1143,"line_start":19,"line_end":19,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":1144,"byte_end":1147,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Additionally hash functions implement traits from the standard library:","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":1148,"byte_end":1223,"line_start":21,"line_end":21,"column_start":1,"column_end":76}},{"value":"/ [`Default`], [`Clone`], [`Write`][std::io::Write]. The latter is","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":1224,"byte_end":1292,"line_start":22,"line_end":22,"column_start":1,"column_end":69}},{"value":"/ feature-gated behind `std` feature, which is usually enabled by default","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":1293,"byte_end":1368,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ by hash implementation crates.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":1369,"byte_end":1403,"line_start":24,"line_end":24,"column_start":1,"column_end":35}},{"value":"no_std","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":1405,"byte_end":1415,"line_start":26,"line_end":26,"column_start":1,"column_end":11}},{"value":"forbid(unsafe_code)","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":1455,"byte_end":1478,"line_start":28,"line_end":28,"column_start":1,"column_end":24}},{"value":"warn(missing_docs, rust_2018_idioms)","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":1729,"byte_end":1769,"line_start":34,"line_end":34,"column_start":1,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":9},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"core_api","qualname":"::core_api","value":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":165},{"krate":0,"index":258},{"krate":0,"index":404},{"krate":0,"index":444},{"krate":0,"index":447},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":454},{"krate":0,"index":457},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":468},{"krate":0,"index":471},{"krate":0,"index":473},{"krate":0,"index":795},{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":803}],"decl_id":null,"docs":" Low-level traits operating on blocks and wrappers around them.","sig":null,"attributes":[{"value":"cfg(feature = \"core-api\")","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2074,"byte_end":2102,"line_start":53,"line_end":53,"column_start":1,"column_end":29}},{"value":"/ Low-level traits operating on blocks and wrappers around them.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":10567,"byte_end":10633,"line_start":1,"line_end":1,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":10634,"byte_end":10637,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Usage of traits in this module in user code is discouraged. Instead use","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":10638,"byte_end":10713,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ core algorithm wrapped by the wrapper types, which implement the","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":10714,"byte_end":10782,"line_start":4,"line_end":4,"column_start":1,"column_end":69}},{"value":"/ higher-level traits.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":10783,"byte_end":10807,"line_start":5,"line_end":5,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":758},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/ct_variable.rs","byte_start":15324,"byte_end":15345,"line_start":18,"line_end":18,"column_start":12,"column_end":33},"name":"CtVariableCoreWrapper","qualname":"::core_api::ct_variable::CtVariableCoreWrapper","value":"CtVariableCoreWrapper {  }","parent":null,"children":[{"krate":0,"index":761},{"krate":0,"index":762}],"decl_id":null,"docs":" Wrapper around [`VariableOutputCore`] which selects output size\n at compile time.\n","sig":null,"attributes":[{"value":"/ Wrapper around [`VariableOutputCore`] which selects output size","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/ct_variable.rs","byte_start":15207,"byte_end":15274,"line_start":15,"line_end":15,"column_start":1,"column_end":68}},{"value":"/ at compile time.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/ct_variable.rs","byte_start":15275,"byte_end":15295,"line_start":16,"line_end":16,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":767},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/rt_variable.rs","byte_start":20100,"byte_end":20121,"line_start":13,"line_end":13,"column_start":12,"column_end":33},"name":"RtVariableCoreWrapper","qualname":"::core_api::rt_variable::RtVariableCoreWrapper","value":"RtVariableCoreWrapper {  }","parent":null,"children":[{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":771}],"decl_id":null,"docs":" Wrapper around [`VariableOutputCore`] which selects output size\n at run time.\n","sig":null,"attributes":[{"value":"/ Wrapper around [`VariableOutputCore`] which selects output size","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/rt_variable.rs","byte_start":19987,"byte_end":20054,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"/ at run time.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/rt_variable.rs","byte_start":20055,"byte_end":20071,"line_start":11,"line_end":11,"column_start":1,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":775},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":24696,"byte_end":24707,"line_start":20,"line_end":20,"column_start":12,"column_end":23},"name":"CoreWrapper","qualname":"::core_api::wrapper::CoreWrapper","value":"CoreWrapper {  }","parent":null,"children":[{"krate":0,"index":777},{"krate":0,"index":778}],"decl_id":null,"docs":" Wrapper around [`BufferKindUser`].","sig":null,"attributes":[{"value":"/ Wrapper around [`BufferKindUser`].","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":24547,"byte_end":24585,"line_start":16,"line_end":16,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":24586,"byte_end":24589,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ It handles data buffering and implements the slice-based traits.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":24590,"byte_end":24658,"line_start":18,"line_end":18,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":25678,"byte_end":25687,"line_start":66,"line_end":66,"column_start":12,"column_end":21},"name":"from_core","qualname":"<CoreWrapper<T>>::from_core","value":"pub fn from_core(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new wrapper from `core`.\n","sig":null,"attributes":[{"value":"/ Create new wrapper from `core`.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":25617,"byte_end":25652,"line_start":64,"line_end":64,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":25657,"byte_end":25666,"line_start":65,"line_end":65,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":357},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":25854,"byte_end":25863,"line_start":73,"line_end":73,"column_start":12,"column_end":21},"name":"decompose","qualname":"<CoreWrapper<T>>::decompose","value":"pub fn decompose(Self) -> (T, Buffer<T>)","parent":null,"children":[],"decl_id":null,"docs":" Decompose wrapper into inner parts.\n","sig":null,"attributes":[{"value":"/ Decompose wrapper into inner parts.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":25789,"byte_end":25828,"line_start":71,"line_end":71,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":25833,"byte_end":25842,"line_start":72,"line_end":72,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":395},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":30310,"byte_end":30319,"line_start":251,"line_end":251,"column_start":11,"column_end":20},"name":"CoreProxy","qualname":"::core_api::wrapper::CoreProxy","value":"CoreProxy: sealed::Sealed","parent":null,"children":[{"krate":0,"index":396}],"decl_id":null,"docs":" A proxy trait to a core type implemented by [`CoreWrapper`]\n","sig":null,"attributes":[{"value":"/ A proxy trait to a core type implemented by [`CoreWrapper`]","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":30119,"byte_end":30182,"line_start":248,"line_end":248,"column_start":1,"column_end":64}}]},{"kind":"Type","id":{"krate":0,"index":396},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":30388,"byte_end":30392,"line_start":253,"line_end":253,"column_start":10,"column_end":14},"name":"Core","qualname":"::core_api::wrapper::CoreProxy::Core","value":"type Core;","parent":{"krate":0,"index":395},"children":[],"decl_id":null,"docs":" Type wrapped by [`CoreWrapper`].\n","sig":null,"attributes":[{"value":"/ Type wrapped by [`CoreWrapper`].","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":30342,"byte_end":30378,"line_start":252,"line_end":252,"column_start":5,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":398},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":30424,"byte_end":30430,"line_start":257,"line_end":257,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::core_api::wrapper::sealed::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":785},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/xof_reader.rs","byte_start":31072,"byte_end":31092,"line_start":11,"line_end":11,"column_start":12,"column_end":32},"name":"XofReaderCoreWrapper","qualname":"::core_api::xof_reader::XofReaderCoreWrapper","value":"XofReaderCoreWrapper {  }","parent":null,"children":[{"krate":0,"index":787},{"krate":0,"index":788}],"decl_id":null,"docs":" Wrapper around [`XofReaderCore`] implementations.","sig":null,"attributes":[{"value":"/ Wrapper around [`XofReaderCore`] implementations.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/xof_reader.rs","byte_start":30910,"byte_end":30963,"line_start":7,"line_end":7,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/xof_reader.rs","byte_start":30964,"byte_end":30967,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ It handles data buffering and implements the mid-level traits.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/xof_reader.rs","byte_start":30968,"byte_end":31034,"line_start":9,"line_end":9,"column_start":1,"column_end":67}}]},{"kind":"Type","id":{"krate":0,"index":460},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":11368,"byte_end":11374,"line_start":25,"line_end":25,"column_start":10,"column_end":16},"name":"Buffer","qualname":"::core_api::Buffer","value":"BlockBuffer<<S as BlockSizeUser>::BlockSize,\n            <S as BufferKindUser>::BufferKind>","parent":null,"children":[],"decl_id":null,"docs":" Buffer type used by type which implements [`BufferKindUser`].\n","sig":null,"attributes":[{"value":"/ Buffer type used by type which implements [`BufferKindUser`].","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":11293,"byte_end":11358,"line_start":24,"line_end":24,"column_start":1,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":462},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":11516,"byte_end":11526,"line_start":29,"line_end":29,"column_start":11,"column_end":21},"name":"UpdateCore","qualname":"::core_api::UpdateCore","value":"UpdateCore: BlockSizeUser","parent":null,"children":[{"krate":0,"index":463}],"decl_id":null,"docs":" Types which consume data in blocks.\n","sig":null,"attributes":[{"value":"/ Types which consume data in blocks.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":11466,"byte_end":11505,"line_start":28,"line_end":28,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":11604,"byte_end":11617,"line_start":31,"line_end":31,"column_start":8,"column_end":21},"name":"update_blocks","qualname":"::core_api::UpdateCore::update_blocks","value":"pub fn update_blocks(&mut Self, &[Block<Self>])","parent":{"krate":0,"index":462},"children":[],"decl_id":null,"docs":" Update state using the provided data blocks.\n","sig":null,"attributes":[{"value":"/ Update state using the provided data blocks.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":11548,"byte_end":11596,"line_start":30,"line_end":30,"column_start":5,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":464},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":11718,"byte_end":11732,"line_start":35,"line_end":35,"column_start":11,"column_end":25},"name":"BufferKindUser","qualname":"::core_api::BufferKindUser","value":"BufferKindUser: BlockSizeUser","parent":null,"children":[{"krate":0,"index":465}],"decl_id":null,"docs":" Types which use [`BlockBuffer`] functionality.\n","sig":null,"attributes":[{"value":"/ Types which use [`BlockBuffer`] functionality.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":11657,"byte_end":11707,"line_start":34,"line_end":34,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":465},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":11811,"byte_end":11821,"line_start":37,"line_end":37,"column_start":10,"column_end":20},"name":"BufferKind","qualname":"::core_api::BufferKindUser::BufferKind","value":"type BufferKind: BufferKind;","parent":{"krate":0,"index":464},"children":[],"decl_id":null,"docs":" Block buffer kind over which type operates.\n","sig":null,"attributes":[{"value":"/ Block buffer kind over which type operates.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":11754,"byte_end":11801,"line_start":36,"line_end":36,"column_start":5,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":466},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":11906,"byte_end":11921,"line_start":41,"line_end":41,"column_start":11,"column_end":26},"name":"FixedOutputCore","qualname":"::core_api::FixedOutputCore","value":"FixedOutputCore: UpdateCore + BufferKindUser + OutputSizeUser","parent":null,"children":[{"krate":0,"index":467}],"decl_id":null,"docs":" Core trait for hash functions with fixed output size.\n","sig":null,"attributes":[{"value":"/ Core trait for hash functions with fixed output size.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":11838,"byte_end":11895,"line_start":40,"line_end":40,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":12215,"byte_end":12234,"line_start":48,"line_end":48,"column_start":8,"column_end":27},"name":"finalize_fixed_core","qualname":"::core_api::FixedOutputCore::finalize_fixed_core","value":"pub fn finalize_fixed_core(&mut Self, &mut Buffer<Self>, &mut Output<Self>)","parent":{"krate":0,"index":466},"children":[],"decl_id":null,"docs":" Finalize state using remaining data stored in the provided block buffer,\n write result into provided array and leave `self` in a dirty state.\n","sig":null,"attributes":[{"value":"/ Finalize state using remaining data stored in the provided block buffer,","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":12055,"byte_end":12131,"line_start":46,"line_end":46,"column_start":5,"column_end":81}},{"value":"/ write result into provided array and leave `self` in a dirty state.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":12136,"byte_end":12207,"line_start":47,"line_end":47,"column_start":5,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":468},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":12380,"byte_end":12400,"line_start":52,"line_end":52,"column_start":11,"column_end":31},"name":"ExtendableOutputCore","qualname":"::core_api::ExtendableOutputCore","value":"ExtendableOutputCore: UpdateCore + BufferKindUser","parent":null,"children":[{"krate":0,"index":469},{"krate":0,"index":470}],"decl_id":null,"docs":" Core trait for hash functions with extendable (XOF) output size.\n","sig":null,"attributes":[{"value":"/ Core trait for hash functions with extendable (XOF) output size.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":12301,"byte_end":12369,"line_start":51,"line_end":51,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":469},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":12553,"byte_end":12563,"line_start":58,"line_end":58,"column_start":10,"column_end":20},"name":"ReaderCore","qualname":"::core_api::ExtendableOutputCore::ReaderCore","value":"type ReaderCore: XofReaderCore;","parent":{"krate":0,"index":468},"children":[],"decl_id":null,"docs":" XOF reader core state.\n","sig":null,"attributes":[{"value":"/ XOF reader core state.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":12517,"byte_end":12543,"line_start":57,"line_end":57,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":12707,"byte_end":12724,"line_start":62,"line_end":62,"column_start":8,"column_end":25},"name":"finalize_xof_core","qualname":"::core_api::ExtendableOutputCore::finalize_xof_core","value":"pub fn finalize_xof_core(&mut Self, &mut Buffer<Self>) -> Self::ReaderCore","parent":{"krate":0,"index":468},"children":[],"decl_id":null,"docs":" Retrieve XOF reader using remaining data stored in the block buffer\n and leave hasher in a dirty state.\n","sig":null,"attributes":[{"value":"/ Retrieve XOF reader using remaining data stored in the block buffer","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":12585,"byte_end":12656,"line_start":60,"line_end":60,"column_start":5,"column_end":76}},{"value":"/ and leave hasher in a dirty state.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":12661,"byte_end":12699,"line_start":61,"line_end":61,"column_start":5,"column_end":43}}]},{"kind":"Trait","id":{"krate":0,"index":471},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":12864,"byte_end":12877,"line_start":66,"line_end":66,"column_start":11,"column_end":24},"name":"XofReaderCore","qualname":"::core_api::XofReaderCore","value":"XofReaderCore: BlockSizeUser","parent":null,"children":[{"krate":0,"index":472}],"decl_id":null,"docs":" Core reader trait for extendable-output function (XOF) result.\n","sig":null,"attributes":[{"value":"/ Core reader trait for extendable-output function (XOF) result.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":12787,"byte_end":12853,"line_start":65,"line_end":65,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":12931,"byte_end":12941,"line_start":68,"line_end":68,"column_start":8,"column_end":18},"name":"read_block","qualname":"::core_api::XofReaderCore::read_block","value":"pub fn read_block(&mut Self) -> Block<Self>","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" Read next XOF block.\n","sig":null,"attributes":[{"value":"/ Read next XOF block.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":12899,"byte_end":12923,"line_start":67,"line_end":67,"column_start":5,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":473},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":13516,"byte_end":13534,"line_start":82,"line_end":82,"column_start":11,"column_end":29},"name":"VariableOutputCore","qualname":"::core_api::VariableOutputCore","value":"VariableOutputCore: UpdateCore + OutputSizeUser + BufferKindUser + Sized","parent":null,"children":[{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476}],"decl_id":null,"docs":" Core trait for hash functions with variable output size.","sig":null,"attributes":[{"value":"/ Core trait for hash functions with variable output size.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":12972,"byte_end":13032,"line_start":71,"line_end":71,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":13033,"byte_end":13036,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ Maximum output size is equal to [`OutputSizeUser::OutputSize`].","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":13037,"byte_end":13104,"line_start":73,"line_end":73,"column_start":1,"column_end":68}},{"value":"/ Users are expected to truncate result returned by the","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":13105,"byte_end":13162,"line_start":74,"line_end":74,"column_start":1,"column_end":58}},{"value":"/ [`finalize_variable_core`] to `output_size` passed to the [`new`] method","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":13163,"byte_end":13239,"line_start":75,"line_end":75,"column_start":1,"column_end":77}},{"value":"/ during construction. Truncation side is defined by the [`TRUNC_SIDE`]","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":13240,"byte_end":13313,"line_start":76,"line_end":76,"column_start":1,"column_end":74}},{"value":"/ associated constant.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":13314,"byte_end":13338,"line_start":77,"line_end":77,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":13339,"byte_end":13342,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ [`finalize_variable_core`]: VariableOutputCore::finalize_variable_core","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":13343,"byte_end":13417,"line_start":79,"line_end":79,"column_start":1,"column_end":75}},{"value":"/ [`new`]: VariableOutputCore::new","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":13418,"byte_end":13454,"line_start":80,"line_end":80,"column_start":1,"column_end":37}},{"value":"/ [`TRUNC_SIDE`]: VariableOutputCore::TRUNC_SIDE","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":13455,"byte_end":13505,"line_start":81,"line_end":81,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":474},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":13739,"byte_end":13749,"line_start":88,"line_end":88,"column_start":11,"column_end":21},"name":"TRUNC_SIDE","qualname":"::core_api::VariableOutputCore::TRUNC_SIDE","value":"TruncSide","parent":{"krate":0,"index":473},"children":[],"decl_id":null,"docs":" Side which should be used in a truncated result.\n","sig":null,"attributes":[{"value":"/ Side which should be used in a truncated result.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":13676,"byte_end":13728,"line_start":87,"line_end":87,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":14056,"byte_end":14059,"line_start":97,"line_end":97,"column_start":8,"column_end":11},"name":"new","qualname":"::core_api::VariableOutputCore::new","value":"pub fn new(usize) -> Result<Self, InvalidOutputSize>","parent":{"krate":0,"index":473},"children":[],"decl_id":null,"docs":" Initialize hasher state for given output size.","sig":null,"attributes":[{"value":"/ Initialize hasher state for given output size.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":13767,"byte_end":13817,"line_start":90,"line_end":90,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":13822,"byte_end":13825,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Returns [`InvalidOutputSize`] if `output_size` is not valid for","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":13830,"byte_end":13897,"line_start":92,"line_end":92,"column_start":5,"column_end":72}},{"value":"/ the algorithm, e.g. if it's bigger than the [`OutputSize`]","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":13902,"byte_end":13964,"line_start":93,"line_end":93,"column_start":5,"column_end":67}},{"value":"/ associated type.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":13969,"byte_end":13989,"line_start":94,"line_end":94,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":13994,"byte_end":13997,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ [`OutputSize`]: OutputSizeUser::OutputSize","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":14002,"byte_end":14048,"line_start":96,"line_end":96,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":14445,"byte_end":14467,"line_start":106,"line_end":106,"column_start":8,"column_end":30},"name":"finalize_variable_core","qualname":"::core_api::VariableOutputCore::finalize_variable_core","value":"pub fn finalize_variable_core(&mut Self, &mut Buffer<Self>, &mut Output<Self>)","parent":{"krate":0,"index":473},"children":[],"decl_id":null,"docs":" Finalize hasher and write full hashing result into the `out` buffer.","sig":null,"attributes":[{"value":"/ Finalize hasher and write full hashing result into the `out` buffer.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":14121,"byte_end":14193,"line_start":99,"line_end":99,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":14198,"byte_end":14201,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ The result must be truncated to `output_size` used during hasher","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":14206,"byte_end":14274,"line_start":101,"line_end":101,"column_start":5,"column_end":73}},{"value":"/ construction. Truncation side is defined by the [`TRUNC_SIDE`]","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":14279,"byte_end":14345,"line_start":102,"line_end":102,"column_start":5,"column_end":71}},{"value":"/ associated constant.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":14350,"byte_end":14374,"line_start":103,"line_end":103,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":14379,"byte_end":14382,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ [`TRUNC_SIDE`]: VariableOutputCore::TRUNC_SIDE","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":14387,"byte_end":14437,"line_start":105,"line_end":105,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":796},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":14725,"byte_end":14729,"line_start":114,"line_end":114,"column_start":5,"column_end":9},"name":"Left","qualname":"::core_api::TruncSide::Left","value":"TruncSide::Left","parent":{"krate":0,"index":795},"children":[],"decl_id":null,"docs":" Truncate left side, i.e. `&out[..n]`.\n","sig":null,"attributes":[{"value":"/ Truncate left side, i.e. `&out[..n]`.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":14679,"byte_end":14720,"line_start":113,"line_end":113,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":798},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":14782,"byte_end":14787,"line_start":116,"line_end":116,"column_start":5,"column_end":10},"name":"Right","qualname":"::core_api::TruncSide::Right","value":"TruncSide::Right","parent":{"krate":0,"index":795},"children":[],"decl_id":null,"docs":" Truncate right side, i.e. `&out[m..]`.\n","sig":null,"attributes":[{"value":"/ Truncate right side, i.e. `&out[m..]`.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":14735,"byte_end":14777,"line_start":115,"line_end":115,"column_start":5,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":795},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":14663,"byte_end":14672,"line_start":112,"line_end":112,"column_start":10,"column_end":19},"name":"TruncSide","qualname":"::core_api::TruncSide","value":"pub enum TruncSide { Left, Right, }","parent":null,"children":[{"krate":0,"index":796},{"krate":0,"index":798}],"decl_id":null,"docs":" Type which used for defining truncation side in the [`VariableOutputCore`]\n trait.\n","sig":null,"attributes":[{"value":"/ Type which used for defining truncation side in the [`VariableOutputCore`]","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":14534,"byte_end":14612,"line_start":109,"line_end":109,"column_start":1,"column_end":79}},{"value":"/ trait.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":14613,"byte_end":14623,"line_start":110,"line_end":110,"column_start":1,"column_end":11}}]},{"kind":"Trait","id":{"krate":0,"index":507},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":32623,"byte_end":32633,"line_start":9,"line_end":9,"column_start":11,"column_end":21},"name":"HashMarker","qualname":"::digest::HashMarker","value":"HashMarker","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for cryptographic hash functions.\n","sig":null,"attributes":[{"value":"/ Marker trait for cryptographic hash functions.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":32562,"byte_end":32612,"line_start":8,"line_end":8,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":508},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":32903,"byte_end":32909,"line_start":16,"line_end":16,"column_start":11,"column_end":17},"name":"Digest","qualname":"::digest::Digest","value":"Digest: OutputSizeUser","parent":null,"children":[{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":512},{"krate":0,"index":514},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522}],"decl_id":null,"docs":" Convinience wrapper trait covering functionality of cryptographic hash\n functions with fixed output size.","sig":null,"attributes":[{"value":"/ Convinience wrapper trait covering functionality of cryptographic hash","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":32638,"byte_end":32712,"line_start":11,"line_end":11,"column_start":1,"column_end":75}},{"value":"/ functions with fixed output size.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":32713,"byte_end":32750,"line_start":12,"line_end":12,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":32751,"byte_end":32754,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This trait wraps [`Update`], [`FixedOutput`], [`Default`], and","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":32755,"byte_end":32821,"line_start":14,"line_end":14,"column_start":1,"column_end":67}},{"value":"/ [`HashMarker`] traits and provides additional convenience methods.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":32822,"byte_end":32892,"line_start":15,"line_end":15,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":32971,"byte_end":32974,"line_start":18,"line_end":18,"column_start":8,"column_end":11},"name":"new","qualname":"::digest::Digest::new","value":"pub fn new() -> Self","parent":{"krate":0,"index":508},"children":[],"decl_id":null,"docs":" Create new hasher instance.\n","sig":null,"attributes":[{"value":"/ Create new hasher instance.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":32932,"byte_end":32963,"line_start":17,"line_end":17,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":33068,"byte_end":33083,"line_start":21,"line_end":21,"column_start":8,"column_end":23},"name":"new_with_prefix","qualname":"::digest::Digest::new_with_prefix","value":"pub fn new_with_prefix<impl AsRef<[u8]>: AsRef<[u8]>>(impl AsRef<[u8]>)\n-> Self","parent":{"krate":0,"index":508},"children":[],"decl_id":null,"docs":" Create new hasher instance which has processed the provided data.\n","sig":null,"attributes":[{"value":"/ Create new hasher instance which has processed the provided data.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":32991,"byte_end":33060,"line_start":20,"line_end":20,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":33176,"byte_end":33182,"line_start":24,"line_end":24,"column_start":8,"column_end":14},"name":"update","qualname":"::digest::Digest::update","value":"pub fn update<impl AsRef<[u8]>: AsRef<[u8]>>(&mut Self, impl AsRef<[u8]>)","parent":{"krate":0,"index":508},"children":[],"decl_id":null,"docs":" Process data, updating the internal state.\n","sig":null,"attributes":[{"value":"/ Process data, updating the internal state.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":33122,"byte_end":33168,"line_start":23,"line_end":23,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":33275,"byte_end":33287,"line_start":27,"line_end":27,"column_start":8,"column_end":20},"name":"chain_update","qualname":"::digest::Digest::chain_update","value":"pub fn chain_update<impl AsRef<[u8]>: AsRef<[u8]>>(Self, impl AsRef<[u8]>)\n-> Self","parent":{"krate":0,"index":508},"children":[],"decl_id":null,"docs":" Process input data in a chained manner.\n","sig":null,"attributes":[{"value":"/ Process input data in a chained manner.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":33224,"byte_end":33267,"line_start":26,"line_end":26,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":33388,"byte_end":33396,"line_start":30,"line_end":30,"column_start":8,"column_end":16},"name":"finalize","qualname":"::digest::Digest::finalize","value":"pub fn finalize(Self) -> Output<Self>","parent":{"krate":0,"index":508},"children":[],"decl_id":null,"docs":" Retrieve result and consume hasher instance.\n","sig":null,"attributes":[{"value":"/ Retrieve result and consume hasher instance.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":33332,"byte_end":33380,"line_start":29,"line_end":29,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":33502,"byte_end":33515,"line_start":33,"line_end":33,"column_start":8,"column_end":21},"name":"finalize_into","qualname":"::digest::Digest::finalize_into","value":"pub fn finalize_into(Self, &mut Output<Self>)","parent":{"krate":0,"index":508},"children":[],"decl_id":null,"docs":" Write result into provided array and consume the hasher instance.\n","sig":null,"attributes":[{"value":"/ Write result into provided array and consume the hasher instance.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":33425,"byte_end":33494,"line_start":32,"line_end":32,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":33606,"byte_end":33620,"line_start":36,"line_end":36,"column_start":8,"column_end":22},"name":"finalize_reset","qualname":"::digest::Digest::finalize_reset","value":"pub fn finalize_reset(&mut Self) -> Output<Self> where Self: FixedOutputReset","parent":{"krate":0,"index":508},"children":[],"decl_id":null,"docs":" Retrieve result and reset hasher instance.\n","sig":null,"attributes":[{"value":"/ Retrieve result and reset hasher instance.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":33552,"byte_end":33598,"line_start":35,"line_end":35,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":33770,"byte_end":33789,"line_start":41,"line_end":41,"column_start":8,"column_end":27},"name":"finalize_into_reset","qualname":"::digest::Digest::finalize_into_reset","value":"pub fn finalize_into_reset(&mut Self, &mut Output<Self>) where\nSelf: FixedOutputReset","parent":{"krate":0,"index":508},"children":[],"decl_id":null,"docs":" Write result into provided array and reset the hasher instance.\n","sig":null,"attributes":[{"value":"/ Write result into provided array and reset the hasher instance.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":33695,"byte_end":33762,"line_start":40,"line_end":40,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":33927,"byte_end":33932,"line_start":46,"line_end":46,"column_start":8,"column_end":13},"name":"reset","qualname":"::digest::Digest::reset","value":"pub fn reset(&mut Self) where Self: Reset","parent":{"krate":0,"index":508},"children":[],"decl_id":null,"docs":" Reset hasher instance to its initial state.\n","sig":null,"attributes":[{"value":"/ Reset hasher instance to its initial state.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":33872,"byte_end":33919,"line_start":45,"line_end":45,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":34021,"byte_end":34032,"line_start":51,"line_end":51,"column_start":8,"column_end":19},"name":"output_size","qualname":"::digest::Digest::output_size","value":"pub fn output_size() -> usize","parent":{"krate":0,"index":508},"children":[],"decl_id":null,"docs":" Get output size of the hasher\n","sig":null,"attributes":[{"value":"/ Get output size of the hasher","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":33980,"byte_end":34013,"line_start":50,"line_end":50,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":34085,"byte_end":34091,"line_start":54,"line_end":54,"column_start":8,"column_end":14},"name":"digest","qualname":"::digest::Digest::digest","value":"pub fn digest<impl AsRef<[u8]>: AsRef<[u8]>>(impl AsRef<[u8]>) -> Output<Self>","parent":{"krate":0,"index":508},"children":[],"decl_id":null,"docs":" Compute hash of `data`.\n","sig":null,"attributes":[{"value":"/ Compute hash of `data`.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":34050,"byte_end":34077,"line_start":53,"line_end":53,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":541},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":35787,"byte_end":35796,"line_start":132,"line_end":132,"column_start":11,"column_end":20},"name":"DynDigest","qualname":"::digest::DynDigest","value":"DynDigest","parent":null,"children":[{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549}],"decl_id":null,"docs":" Modification of the [`Digest`] trait suitable for trait objects.\n","sig":null,"attributes":[{"value":"/ Modification of the [`Digest`] trait suitable for trait objects.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":35708,"byte_end":35776,"line_start":131,"line_end":131,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":35919,"byte_end":35925,"line_start":136,"line_end":136,"column_start":8,"column_end":14},"name":"update","qualname":"::digest::DynDigest::update","value":"pub fn update(&mut Self, &[u8])","parent":{"krate":0,"index":541},"children":[],"decl_id":null,"docs":" Digest input data.","sig":null,"attributes":[{"value":"/ Digest input data.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":35803,"byte_end":35825,"line_start":133,"line_end":133,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":35830,"byte_end":35833,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ This method can be called repeatedly for use with streaming messages.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":35838,"byte_end":35911,"line_start":135,"line_end":135,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":36092,"byte_end":36106,"line_start":141,"line_end":141,"column_start":8,"column_end":22},"name":"finalize_reset","qualname":"::digest::DynDigest::finalize_reset","value":"pub fn finalize_reset(&mut Self) -> Box<[u8]>","parent":{"krate":0,"index":541},"children":[],"decl_id":null,"docs":" Retrieve result and reset hasher instance\n","sig":null,"attributes":[{"value":"/ Retrieve result and reset hasher instance","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":35956,"byte_end":36001,"line_start":138,"line_end":138,"column_start":5,"column_end":50}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":36006,"byte_end":36031,"line_start":139,"line_end":139,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":36466,"byte_end":36474,"line_start":151,"line_end":151,"column_start":8,"column_end":16},"name":"finalize","qualname":"::digest::DynDigest::finalize","value":"pub fn finalize(Box<Self>) -> Box<[u8]>","parent":{"krate":0,"index":541},"children":[],"decl_id":null,"docs":" Retrieve result and consume boxed hasher instance\n","sig":null,"attributes":[{"value":"/ Retrieve result and consume boxed hasher instance","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":36288,"byte_end":36341,"line_start":147,"line_end":147,"column_start":5,"column_end":58}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":36346,"byte_end":36371,"line_start":148,"line_end":148,"column_start":5,"column_end":30}},{"value":"allow(clippy :: boxed_local)","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":36429,"byte_end":36458,"line_start":150,"line_end":150,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":36821,"byte_end":36834,"line_start":160,"line_end":160,"column_start":8,"column_end":21},"name":"finalize_into","qualname":"::digest::DynDigest::finalize_into","value":"pub fn finalize_into(Self, &mut [u8]) -> Result<(), InvalidBufferSize>","parent":{"krate":0,"index":541},"children":[],"decl_id":null,"docs":" Write result into provided array and consume the hasher instance.","sig":null,"attributes":[{"value":"/ Write result into provided array and consume the hasher instance.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":36666,"byte_end":36735,"line_start":157,"line_end":157,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":36740,"byte_end":36743,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ Returns error if buffer length is not equal to `output_size`.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":36748,"byte_end":36813,"line_start":159,"line_end":159,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":37049,"byte_end":37068,"line_start":165,"line_end":165,"column_start":8,"column_end":27},"name":"finalize_into_reset","qualname":"::digest::DynDigest::finalize_into_reset","value":"pub fn finalize_into_reset(&mut Self, &mut [u8])\n-> Result<(), InvalidBufferSize>","parent":{"krate":0,"index":541},"children":[],"decl_id":null,"docs":" Write result into provided array and reset the hasher instance.","sig":null,"attributes":[{"value":"/ Write result into provided array and reset the hasher instance.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":36896,"byte_end":36963,"line_start":162,"line_end":162,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":36968,"byte_end":36971,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ Returns error if buffer length is not equal to `output_size`.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":36976,"byte_end":37041,"line_start":164,"line_end":164,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":37190,"byte_end":37195,"line_start":168,"line_end":168,"column_start":8,"column_end":13},"name":"reset","qualname":"::digest::DynDigest::reset","value":"pub fn reset(&mut Self)","parent":{"krate":0,"index":541},"children":[],"decl_id":null,"docs":" Reset hasher instance to its initial state.\n","sig":null,"attributes":[{"value":"/ Reset hasher instance to its initial state.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":37135,"byte_end":37182,"line_start":167,"line_end":167,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":37254,"byte_end":37265,"line_start":171,"line_end":171,"column_start":8,"column_end":19},"name":"output_size","qualname":"::digest::DynDigest::output_size","value":"pub fn output_size(&Self) -> usize","parent":{"krate":0,"index":541},"children":[],"decl_id":null,"docs":" Get output size of the hasher\n","sig":null,"attributes":[{"value":"/ Get output size of the hasher","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":37213,"byte_end":37246,"line_start":170,"line_end":170,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":37427,"byte_end":37436,"line_start":176,"line_end":176,"column_start":8,"column_end":17},"name":"box_clone","qualname":"::digest::DynDigest::box_clone","value":"pub fn box_clone(&Self) -> Box<dyn DynDigest>","parent":{"krate":0,"index":541},"children":[],"decl_id":null,"docs":" Clone hasher state into a boxed trait object\n","sig":null,"attributes":[{"value":"/ Clone hasher state into a boxed trait object","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":37288,"byte_end":37336,"line_start":173,"line_end":173,"column_start":5,"column_end":53}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":37341,"byte_end":37366,"line_start":174,"line_end":174,"column_start":5,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":608},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":39497,"byte_end":39506,"line_start":12,"line_end":12,"column_start":11,"column_end":20},"name":"MacMarker","qualname":"::mac::MacMarker","value":"MacMarker","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for Message Authentication algorithms.\n","sig":null,"attributes":[{"value":"/ Marker trait for Message Authentication algorithms.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":39384,"byte_end":39439,"line_start":10,"line_end":10,"column_start":1,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":609},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":39800,"byte_end":39803,"line_start":19,"line_end":19,"column_start":11,"column_end":14},"name":"Mac","qualname":"::mac::Mac","value":"Mac: KeySizeUser + OutputSizeUser + Sized","parent":null,"children":[{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619}],"decl_id":null,"docs":" Convinience wrapper trait covering functionality of Message Authentication algorithms.","sig":null,"attributes":[{"value":"/ Convinience wrapper trait covering functionality of Message Authentication algorithms.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":39511,"byte_end":39601,"line_start":14,"line_end":14,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":39602,"byte_end":39605,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This trait wraps [`KeyInit`], [`Update`], [`FixedOutput`], and [`MacMarker`]","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":39606,"byte_end":39686,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/ traits and provides additional convenience methods.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":39687,"byte_end":39742,"line_start":17,"line_end":17,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":39897,"byte_end":39900,"line_start":21,"line_end":21,"column_start":8,"column_end":11},"name":"new","qualname":"::mac::Mac::new","value":"pub fn new(&Key<Self>) -> Self","parent":{"krate":0,"index":609},"children":[],"decl_id":null,"docs":" Create new value from fixed size key.\n","sig":null,"attributes":[{"value":"/ Create new value from fixed size key.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":39848,"byte_end":39889,"line_start":20,"line_end":20,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":40203,"byte_end":40217,"line_start":29,"line_end":29,"column_start":8,"column_end":22},"name":"new_from_slice","qualname":"::mac::Mac::new_from_slice","value":"pub fn new_from_slice(&[u8]) -> Result<Self, InvalidLength>","parent":{"krate":0,"index":609},"children":[],"decl_id":null,"docs":" Create new value from variable size key.\n","sig":null,"attributes":[{"value":"/ Create new value from variable size key.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":40151,"byte_end":40195,"line_start":28,"line_end":28,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":40316,"byte_end":40322,"line_start":32,"line_end":32,"column_start":8,"column_end":14},"name":"update","qualname":"::mac::Mac::update","value":"pub fn update(&mut Self, &[u8])","parent":{"krate":0,"index":609},"children":[],"decl_id":null,"docs":" Update state using the provided data.\n","sig":null,"attributes":[{"value":"/ Update state using the provided data.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":40267,"byte_end":40308,"line_start":31,"line_end":31,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":613},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":40463,"byte_end":40471,"line_start":36,"line_end":36,"column_start":8,"column_end":16},"name":"finalize","qualname":"::mac::Mac::finalize","value":"pub fn finalize(Self) -> CtOutput<Self>","parent":{"krate":0,"index":609},"children":[],"decl_id":null,"docs":" Obtain the result of a [`Mac`] computation as a [`CtOutput`] and consume\n [`Mac`] instance.\n","sig":null,"attributes":[{"value":"/ Obtain the result of a [`Mac`] computation as a [`CtOutput`] and consume","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":40353,"byte_end":40429,"line_start":34,"line_end":34,"column_start":5,"column_end":81}},{"value":"/ [`Mac`] instance.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":40434,"byte_end":40455,"line_start":35,"line_end":35,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":40610,"byte_end":40624,"line_start":40,"line_end":40,"column_start":8,"column_end":22},"name":"finalize_reset","qualname":"::mac::Mac::finalize_reset","value":"pub fn finalize_reset(&mut Self) -> CtOutput<Self> where\nSelf: FixedOutputReset","parent":{"krate":0,"index":609},"children":[],"decl_id":null,"docs":" Obtain the result of a [`Mac`] computation as a [`CtOutput`] and reset\n [`Mac`] instance.\n","sig":null,"attributes":[{"value":"/ Obtain the result of a [`Mac`] computation as a [`CtOutput`] and reset","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":40502,"byte_end":40576,"line_start":38,"line_end":38,"column_start":5,"column_end":79}},{"value":"/ [`Mac`] instance.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":40581,"byte_end":40602,"line_start":39,"line_end":39,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":40753,"byte_end":40758,"line_start":45,"line_end":45,"column_start":8,"column_end":13},"name":"reset","qualname":"::mac::Mac::reset","value":"pub fn reset(&mut Self) where Self: Reset","parent":{"krate":0,"index":609},"children":[],"decl_id":null,"docs":" Reset MAC instance to its initial state.\n","sig":null,"attributes":[{"value":"/ Reset MAC instance to its initial state.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":40701,"byte_end":40745,"line_start":44,"line_end":44,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":40877,"byte_end":40883,"line_start":50,"line_end":50,"column_start":8,"column_end":14},"name":"verify","qualname":"::mac::Mac::verify","value":"pub fn verify(Self, &Output<Self>) -> Result<(), MacError>","parent":{"krate":0,"index":609},"children":[],"decl_id":null,"docs":" Check if tag/code value is correct for the processed input.\n","sig":null,"attributes":[{"value":"/ Check if tag/code value is correct for the processed input.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":40806,"byte_end":40869,"line_start":49,"line_end":49,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":41128,"byte_end":41140,"line_start":57,"line_end":57,"column_start":8,"column_end":20},"name":"verify_slice","qualname":"::mac::Mac::verify_slice","value":"pub fn verify_slice(Self, &[u8]) -> Result<(), MacError>","parent":{"krate":0,"index":609},"children":[],"decl_id":null,"docs":" Check truncated tag correctness using all bytes\n of calculated tag.","sig":null,"attributes":[{"value":"/ Check truncated tag correctness using all bytes","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":40940,"byte_end":40991,"line_start":52,"line_end":52,"column_start":5,"column_end":56}},{"value":"/ of calculated tag.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":40996,"byte_end":41018,"line_start":53,"line_end":53,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":41023,"byte_end":41026,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ Returns `Error` if `tag` is not valid or not equal in length","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":41031,"byte_end":41095,"line_start":55,"line_end":55,"column_start":5,"column_end":69}},{"value":"/ to MAC's output.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":41100,"byte_end":41120,"line_start":56,"line_end":56,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":41363,"byte_end":41384,"line_start":63,"line_end":63,"column_start":8,"column_end":29},"name":"verify_truncated_left","qualname":"::mac::Mac::verify_truncated_left","value":"pub fn verify_truncated_left(Self, &[u8]) -> Result<(), MacError>","parent":{"krate":0,"index":609},"children":[],"decl_id":null,"docs":" Check truncated tag correctness using left side bytes\n (i.e. `tag[..n]`) of calculated tag.","sig":null,"attributes":[{"value":"/ Check truncated tag correctness using left side bytes","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":41189,"byte_end":41246,"line_start":59,"line_end":59,"column_start":5,"column_end":62}},{"value":"/ (i.e. `tag[..n]`) of calculated tag.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":41251,"byte_end":41291,"line_start":60,"line_end":60,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":41296,"byte_end":41299,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ Returns `Error` if `tag` is not valid or empty.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":41304,"byte_end":41355,"line_start":62,"line_end":62,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":41608,"byte_end":41630,"line_start":69,"line_end":69,"column_start":8,"column_end":30},"name":"verify_truncated_right","qualname":"::mac::Mac::verify_truncated_right","value":"pub fn verify_truncated_right(Self, &[u8]) -> Result<(), MacError>","parent":{"krate":0,"index":609},"children":[],"decl_id":null,"docs":" Check truncated tag correctness using right side bytes\n (i.e. `tag[n..]`) of calculated tag.","sig":null,"attributes":[{"value":"/ Check truncated tag correctness using right side bytes","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":41433,"byte_end":41491,"line_start":65,"line_end":65,"column_start":5,"column_end":63}},{"value":"/ (i.e. `tag[n..]`) of calculated tag.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":41496,"byte_end":41536,"line_start":66,"line_end":66,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":41541,"byte_end":41544,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ Returns `Error` if `tag` is not valid or empty.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":41549,"byte_end":41600,"line_start":68,"line_end":68,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":805},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":44290,"byte_end":44298,"line_start":175,"line_end":175,"column_start":12,"column_end":20},"name":"CtOutput","qualname":"::mac::CtOutput","value":"CtOutput {  }","parent":null,"children":[{"krate":0,"index":807}],"decl_id":null,"docs":" Fixed size output value which provides a safe [`Eq`] implementation that\n runs in constant time.","sig":null,"attributes":[{"value":"/ Fixed size output value which provides a safe [`Eq`] implementation that","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":44036,"byte_end":44112,"line_start":169,"line_end":169,"column_start":1,"column_end":77}},{"value":"/ runs in constant time.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":44113,"byte_end":44139,"line_start":170,"line_end":170,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":44140,"byte_end":44143,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ It is useful for implementing Message Authentication Codes (MACs).","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":44144,"byte_end":44214,"line_start":172,"line_end":172,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":44457,"byte_end":44460,"line_start":182,"line_end":182,"column_start":12,"column_end":15},"name":"new","qualname":"<CtOutput<T>>::new","value":"pub fn new(Output<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`CtOutput`] value.\n","sig":null,"attributes":[{"value":"/ Create a new [`CtOutput`] value.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":44387,"byte_end":44423,"line_start":180,"line_end":180,"column_start":5,"column_end":41}},{"value":"inline(always)","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":44428,"byte_end":44445,"line_start":181,"line_end":181,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":44608,"byte_end":44618,"line_start":188,"line_end":188,"column_start":12,"column_end":22},"name":"into_bytes","qualname":"<CtOutput<T>>::into_bytes","value":"pub fn into_bytes(Self) -> Output<T>","parent":null,"children":[],"decl_id":null,"docs":" Get the inner [`Output`] array this type wraps.\n","sig":null,"attributes":[{"value":"/ Get the inner [`Output`] array this type wraps.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":44523,"byte_end":44574,"line_start":186,"line_end":186,"column_start":5,"column_end":56}},{"value":"inline(always)","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":44579,"byte_end":44596,"line_start":187,"line_end":187,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":811},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":45580,"byte_end":45588,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"name":"MacError","qualname":"::mac::MacError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error type for when the [`Output`] of a [`Mac`]\n is not equal to the expected value.\n","sig":null,"attributes":[{"value":"/ Error type for when the [`Output`] of a [`Mac`]","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":45376,"byte_end":45427,"line_start":223,"line_end":223,"column_start":1,"column_end":52}},{"value":"/ is not equal to the expected value.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":45428,"byte_end":45467,"line_start":224,"line_end":224,"column_start":1,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":716},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2749,"byte_end":2755,"line_start":76,"line_end":76,"column_start":11,"column_end":17},"name":"Update","qualname":"::Update","value":"Update","parent":null,"children":[{"krate":0,"index":717},{"krate":0,"index":718}],"decl_id":null,"docs":" Types which consume data with byte granularity.\n","sig":null,"attributes":[{"value":"/ Types which consume data with byte granularity.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2687,"byte_end":2738,"line_start":75,"line_end":75,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2811,"byte_end":2817,"line_start":78,"line_end":78,"column_start":8,"column_end":14},"name":"update","qualname":"::Update::update","value":"pub fn update(&mut Self, &[u8])","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Update state using the provided data.\n","sig":null,"attributes":[{"value":"/ Update state using the provided data.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2762,"byte_end":2803,"line_start":77,"line_end":77,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2898,"byte_end":2903,"line_start":81,"line_end":81,"column_start":8,"column_end":13},"name":"chain","qualname":"::Update::chain","value":"pub fn chain<impl AsRef<[u8]>: AsRef<[u8]>>(Self, impl AsRef<[u8]>) -> Self\nwhere Self: Sized","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Digest input data in a chained manner.\n","sig":null,"attributes":[{"value":"/ Digest input data in a chained manner.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2848,"byte_end":2890,"line_start":80,"line_end":80,"column_start":5,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":720},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":3104,"byte_end":3115,"line_start":91,"line_end":91,"column_start":11,"column_end":22},"name":"FixedOutput","qualname":"::FixedOutput","value":"FixedOutput: Update + OutputSizeUser + Sized","parent":null,"children":[{"krate":0,"index":721},{"krate":0,"index":722}],"decl_id":null,"docs":" Trait for hash functions with fixed-size output.\n","sig":null,"attributes":[{"value":"/ Trait for hash functions with fixed-size output.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":3041,"byte_end":3093,"line_start":90,"line_end":90,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":3218,"byte_end":3231,"line_start":93,"line_end":93,"column_start":8,"column_end":21},"name":"finalize_into","qualname":"::FixedOutput::finalize_into","value":"pub fn finalize_into(Self, &mut Output<Self>)","parent":{"krate":0,"index":720},"children":[],"decl_id":null,"docs":" Consume value and write result into provided array.\n","sig":null,"attributes":[{"value":"/ Consume value and write result into provided array.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":3155,"byte_end":3210,"line_start":92,"line_end":92,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":3342,"byte_end":3356,"line_start":97,"line_end":97,"column_start":8,"column_end":22},"name":"finalize_fixed","qualname":"::FixedOutput::finalize_fixed","value":"pub fn finalize_fixed(Self) -> Output<Self>","parent":{"krate":0,"index":720},"children":[],"decl_id":null,"docs":" Retrieve result and consume the hasher instance.\n","sig":null,"attributes":[{"value":"/ Retrieve result and consume the hasher instance.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":3268,"byte_end":3320,"line_start":95,"line_end":95,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":3325,"byte_end":3334,"line_start":96,"line_end":96,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":723},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":3570,"byte_end":3586,"line_start":105,"line_end":105,"column_start":11,"column_end":27},"name":"FixedOutputReset","qualname":"::FixedOutputReset","value":"FixedOutputReset: FixedOutput + Reset","parent":null,"children":[{"krate":0,"index":724},{"krate":0,"index":725}],"decl_id":null,"docs":" Trait for hash functions with fixed-size output able to reset themselves.\n","sig":null,"attributes":[{"value":"/ Trait for hash functions with fixed-size output able to reset themselves.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":3482,"byte_end":3559,"line_start":104,"line_end":104,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":3686,"byte_end":3705,"line_start":107,"line_end":107,"column_start":8,"column_end":27},"name":"finalize_into_reset","qualname":"::FixedOutputReset::finalize_into_reset","value":"pub fn finalize_into_reset(&mut Self, &mut Output<Self>)","parent":{"krate":0,"index":723},"children":[],"decl_id":null,"docs":" Write result into provided array and reset the hasher state.\n","sig":null,"attributes":[{"value":"/ Write result into provided array and reset the hasher state.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":3614,"byte_end":3678,"line_start":106,"line_end":106,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":3816,"byte_end":3836,"line_start":111,"line_end":111,"column_start":8,"column_end":28},"name":"finalize_fixed_reset","qualname":"::FixedOutputReset::finalize_fixed_reset","value":"pub fn finalize_fixed_reset(&mut Self) -> Output<Self>","parent":{"krate":0,"index":723},"children":[],"decl_id":null,"docs":" Retrieve result and reset the hasher state.\n","sig":null,"attributes":[{"value":"/ Retrieve result and reset the hasher state.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":3747,"byte_end":3794,"line_start":109,"line_end":109,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":3799,"byte_end":3808,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":726},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":4106,"byte_end":4115,"line_start":120,"line_end":120,"column_start":11,"column_end":20},"name":"XofReader","qualname":"::XofReader","value":"XofReader","parent":null,"children":[{"krate":0,"index":727},{"krate":0,"index":728}],"decl_id":null,"docs":" Trait for reader types which are used to extract extendable output\n from a XOF (extendable-output function) result.\n","sig":null,"attributes":[{"value":"/ Trait for reader types which are used to extract extendable output","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":3973,"byte_end":4043,"line_start":118,"line_end":118,"column_start":1,"column_end":71}},{"value":"/ from a XOF (extendable-output function) result.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":4044,"byte_end":4095,"line_start":119,"line_end":119,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":4208,"byte_end":4212,"line_start":122,"line_end":122,"column_start":8,"column_end":12},"name":"read","qualname":"::XofReader::read","value":"pub fn read(&mut Self, &mut [u8])","parent":{"krate":0,"index":726},"children":[],"decl_id":null,"docs":" Read output into the `buffer`. Can be called an unlimited number of times.\n","sig":null,"attributes":[{"value":"/ Read output into the `buffer`. Can be called an unlimited number of times.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":4122,"byte_end":4200,"line_start":121,"line_end":121,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":4622,"byte_end":4632,"line_start":132,"line_end":132,"column_start":8,"column_end":18},"name":"read_boxed","qualname":"::XofReader::read_boxed","value":"pub fn read_boxed(&mut Self, usize) -> Box<[u8]>","parent":{"krate":0,"index":726},"children":[],"decl_id":null,"docs":" Read output into a boxed slice of the specified size.","sig":null,"attributes":[{"value":"/ Read output into a boxed slice of the specified size.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":4249,"byte_end":4306,"line_start":124,"line_end":124,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":4311,"byte_end":4314,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ Can be called an unlimited number of times in combination with `read`.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":4319,"byte_end":4393,"line_start":126,"line_end":126,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":4398,"byte_end":4401,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ `Box<[u8]>` is used instead of `Vec<u8>` to save stack space, since","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":4406,"byte_end":4477,"line_start":128,"line_end":128,"column_start":5,"column_end":76}},{"value":"/ they have size of 2 and 3 words respectively.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":4482,"byte_end":4531,"line_start":129,"line_end":129,"column_start":5,"column_end":54}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":4536,"byte_end":4561,"line_start":130,"line_end":130,"column_start":5,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":729},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":4843,"byte_end":4859,"line_start":140,"line_end":140,"column_start":11,"column_end":27},"name":"ExtendableOutput","qualname":"::ExtendableOutput","value":"ExtendableOutput: Sized + Update","parent":null,"children":[{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":735}],"decl_id":null,"docs":" Trait for hash functions with extendable-output (XOF).\n","sig":null,"attributes":[{"value":"/ Trait for hash functions with extendable-output (XOF).","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":4774,"byte_end":4832,"line_start":139,"line_end":139,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":730},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":4902,"byte_end":4908,"line_start":142,"line_end":142,"column_start":10,"column_end":16},"name":"Reader","qualname":"::ExtendableOutput::Reader","value":"type Reader: XofReader;","parent":{"krate":0,"index":729},"children":[],"decl_id":null,"docs":" Reader\n","sig":null,"attributes":[{"value":"/ Reader","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":4882,"byte_end":4892,"line_start":141,"line_end":141,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":4986,"byte_end":4998,"line_start":145,"line_end":145,"column_start":8,"column_end":20},"name":"finalize_xof","qualname":"::ExtendableOutput::finalize_xof","value":"pub fn finalize_xof(Self) -> Self::Reader","parent":{"krate":0,"index":729},"children":[],"decl_id":null,"docs":" Retrieve XOF reader and consume hasher instance.\n","sig":null,"attributes":[{"value":"/ Retrieve XOF reader and consume hasher instance.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":4926,"byte_end":4978,"line_start":144,"line_end":144,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":5080,"byte_end":5097,"line_start":148,"line_end":148,"column_start":8,"column_end":25},"name":"finalize_xof_into","qualname":"::ExtendableOutput::finalize_xof_into","value":"pub fn finalize_xof_into(Self, &mut [u8])","parent":{"krate":0,"index":729},"children":[],"decl_id":null,"docs":" Finalize XOF and write result into `out`.\n","sig":null,"attributes":[{"value":"/ Finalize XOF and write result into `out`.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":5027,"byte_end":5072,"line_start":147,"line_end":147,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":733},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":5234,"byte_end":5244,"line_start":153,"line_end":153,"column_start":8,"column_end":18},"name":"digest_xof","qualname":"::ExtendableOutput::digest_xof","value":"pub fn digest_xof<impl AsRef<[u8]>: AsRef<[u8]>>(impl AsRef<[u8]>, &mut [u8])\nwhere Self: Default","parent":{"krate":0,"index":729},"children":[],"decl_id":null,"docs":" Compute hash of `data` and write it into `output`.\n","sig":null,"attributes":[{"value":"/ Compute hash of `data` and write it into `output`.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":5172,"byte_end":5226,"line_start":152,"line_end":152,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":735},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":5785,"byte_end":5799,"line_start":169,"line_end":169,"column_start":8,"column_end":22},"name":"finalize_boxed","qualname":"::ExtendableOutput::finalize_boxed","value":"pub fn finalize_boxed(Self, usize) -> Box<[u8]>","parent":{"krate":0,"index":729},"children":[],"decl_id":null,"docs":" Retrieve result into a boxed slice of the specified size and consume\n the hasher.","sig":null,"attributes":[{"value":"/ Retrieve result into a boxed slice of the specified size and consume","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":5464,"byte_end":5536,"line_start":162,"line_end":162,"column_start":5,"column_end":77}},{"value":"/ the hasher.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":5541,"byte_end":5556,"line_start":163,"line_end":163,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":5561,"byte_end":5564,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ `Box<[u8]>` is used instead of `Vec<u8>` to save stack space, since","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":5569,"byte_end":5640,"line_start":165,"line_end":165,"column_start":5,"column_end":76}},{"value":"/ they have size of 2 and 3 words respectively.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":5645,"byte_end":5694,"line_start":166,"line_end":166,"column_start":5,"column_end":54}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":5699,"byte_end":5724,"line_start":167,"line_end":167,"column_start":5,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":736},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":6065,"byte_end":6086,"line_start":177,"line_end":177,"column_start":11,"column_end":32},"name":"ExtendableOutputReset","qualname":"::ExtendableOutputReset","value":"ExtendableOutputReset: ExtendableOutput + Reset","parent":null,"children":[{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739}],"decl_id":null,"docs":" Trait for hash functions with extendable-output (XOF) able to reset themselves.\n","sig":null,"attributes":[{"value":"/ Trait for hash functions with extendable-output (XOF) able to reset themselves.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":5971,"byte_end":6054,"line_start":176,"line_end":176,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":6183,"byte_end":6201,"line_start":179,"line_end":179,"column_start":8,"column_end":26},"name":"finalize_xof_reset","qualname":"::ExtendableOutputReset::finalize_xof_reset","value":"pub fn finalize_xof_reset(&mut Self) -> Self::Reader","parent":{"krate":0,"index":736},"children":[],"decl_id":null,"docs":" Retrieve XOF reader and reset hasher instance state.\n","sig":null,"attributes":[{"value":"/ Retrieve XOF reader and reset hasher instance state.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":6119,"byte_end":6175,"line_start":178,"line_end":178,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":6313,"byte_end":6336,"line_start":182,"line_end":182,"column_start":8,"column_end":31},"name":"finalize_xof_reset_into","qualname":"::ExtendableOutputReset::finalize_xof_reset_into","value":"pub fn finalize_xof_reset_into(&mut Self, &mut [u8])","parent":{"krate":0,"index":736},"children":[],"decl_id":null,"docs":" Finalize XOF, write result into `out`, and reset the hasher state.\n","sig":null,"attributes":[{"value":"/ Finalize XOF, write result into `out`, and reset the hasher state.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":6235,"byte_end":6305,"line_start":181,"line_end":181,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":6747,"byte_end":6767,"line_start":193,"line_end":193,"column_start":8,"column_end":28},"name":"finalize_boxed_reset","qualname":"::ExtendableOutputReset::finalize_boxed_reset","value":"pub fn finalize_boxed_reset(&mut Self, usize) -> Box<[u8]>","parent":{"krate":0,"index":736},"children":[],"decl_id":null,"docs":" Retrieve result into a boxed slice of the specified size and reset\n the hasher state.","sig":null,"attributes":[{"value":"/ Retrieve result into a boxed slice of the specified size and reset","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":6422,"byte_end":6492,"line_start":186,"line_end":186,"column_start":5,"column_end":75}},{"value":"/ the hasher state.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":6497,"byte_end":6518,"line_start":187,"line_end":187,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":6523,"byte_end":6526,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ `Box<[u8]>` is used instead of `Vec<u8>` to save stack space, since","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":6531,"byte_end":6602,"line_start":189,"line_end":189,"column_start":5,"column_end":76}},{"value":"/ they have size of 2 and 3 words respectively.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":6607,"byte_end":6656,"line_start":190,"line_end":190,"column_start":5,"column_end":54}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":6661,"byte_end":6686,"line_start":191,"line_end":191,"column_start":5,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":740},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":7016,"byte_end":7030,"line_start":201,"line_end":201,"column_start":11,"column_end":25},"name":"VariableOutput","qualname":"::VariableOutput","value":"VariableOutput: Sized + Update","parent":null,"children":[{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":748}],"decl_id":null,"docs":" Trait for hash functions with variable-size output.\n","sig":null,"attributes":[{"value":"/ Trait for hash functions with variable-size output.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":6950,"byte_end":7005,"line_start":200,"line_end":200,"column_start":1,"column_end":56}}]},{"kind":"Const","id":{"krate":0,"index":741},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":7096,"byte_end":7111,"line_start":203,"line_end":203,"column_start":11,"column_end":26},"name":"MAX_OUTPUT_SIZE","qualname":"::VariableOutput::MAX_OUTPUT_SIZE","value":"usize","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":" Maximum size of output hash.\n","sig":null,"attributes":[{"value":"/ Maximum size of output hash.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":7053,"byte_end":7085,"line_start":202,"line_end":202,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":7323,"byte_end":7326,"line_start":209,"line_end":209,"column_start":8,"column_end":11},"name":"new","qualname":"::VariableOutput::new","value":"pub fn new(usize) -> Result<Self, InvalidOutputSize>","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":" Create new hasher instance with the given output size.","sig":null,"attributes":[{"value":"/ Create new hasher instance with the given output size.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":7125,"byte_end":7183,"line_start":205,"line_end":205,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":7188,"byte_end":7191,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ It will return `Err(InvalidOutputSize)` in case if hasher can not return","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":7196,"byte_end":7272,"line_start":207,"line_end":207,"column_start":5,"column_end":81}},{"value":"/ hash of the specified output size.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":7277,"byte_end":7315,"line_start":208,"line_end":208,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":7467,"byte_end":7478,"line_start":212,"line_end":212,"column_start":8,"column_end":19},"name":"output_size","qualname":"::VariableOutput::output_size","value":"pub fn output_size(&Self) -> usize","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":" Get output size of the hasher instance provided to the `new` method\n","sig":null,"attributes":[{"value":"/ Get output size of the hasher instance provided to the `new` method","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":7388,"byte_end":7459,"line_start":211,"line_end":211,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":7658,"byte_end":7675,"line_start":218,"line_end":218,"column_start":8,"column_end":25},"name":"finalize_variable","qualname":"::VariableOutput::finalize_variable","value":"pub fn finalize_variable(Self, &mut [u8]) -> Result<(), InvalidBufferSize>","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":" Write result into the output buffer.","sig":null,"attributes":[{"value":"/ Write result into the output buffer.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":7501,"byte_end":7541,"line_start":214,"line_end":214,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":7546,"byte_end":7549,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ Returns `Err(InvalidOutputSize)` if `out` size is not equal to","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":7554,"byte_end":7620,"line_start":216,"line_end":216,"column_start":5,"column_end":71}},{"value":"/ `self.output_size()`.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":7625,"byte_end":7650,"line_start":217,"line_end":217,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":745},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":7975,"byte_end":7990,"line_start":225,"line_end":225,"column_start":8,"column_end":23},"name":"digest_variable","qualname":"::VariableOutput::digest_variable","value":"pub fn digest_variable<impl AsRef<[u8]>: AsRef<[u8]>>(impl AsRef<[u8]>,\n                                                      &mut [u8])\n-> Result<(), InvalidOutputSize>","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":" Compute hash of `data` and write it to `output`.","sig":null,"attributes":[{"value":"/ Compute hash of `data` and write it to `output`.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":7737,"byte_end":7789,"line_start":220,"line_end":220,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":7794,"byte_end":7797,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ Length of the output hash is determined by `output`. If `output` is","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":7802,"byte_end":7873,"line_start":222,"line_end":222,"column_start":5,"column_end":76}},{"value":"/ bigger than `Self::MAX_OUTPUT_SIZE`, this method returns","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":7878,"byte_end":7938,"line_start":223,"line_end":223,"column_start":5,"column_end":65}},{"value":"/ `InvalidOutputSize`.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":7943,"byte_end":7967,"line_start":224,"line_end":224,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":8579,"byte_end":8593,"line_start":242,"line_end":242,"column_start":8,"column_end":22},"name":"finalize_boxed","qualname":"::VariableOutput::finalize_boxed","value":"pub fn finalize_boxed(Self) -> Box<[u8]>","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":" Retrieve result into a boxed slice and consume hasher.","sig":null,"attributes":[{"value":"/ Retrieve result into a boxed slice and consume hasher.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":8292,"byte_end":8350,"line_start":236,"line_end":236,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":8355,"byte_end":8358,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ `Box<[u8]>` is used instead of `Vec<u8>` to save stack space, since","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":8363,"byte_end":8434,"line_start":238,"line_end":238,"column_start":5,"column_end":76}},{"value":"/ they have size of 2 and 3 words respectively.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":8439,"byte_end":8488,"line_start":239,"line_end":239,"column_start":5,"column_end":54}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":8493,"byte_end":8518,"line_start":240,"line_end":240,"column_start":5,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":749},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":8918,"byte_end":8937,"line_start":252,"line_end":252,"column_start":11,"column_end":30},"name":"VariableOutputReset","qualname":"::VariableOutputReset","value":"VariableOutputReset: VariableOutput + Reset","parent":null,"children":[{"krate":0,"index":750},{"krate":0,"index":751}],"decl_id":null,"docs":" Trait for hash functions with variable-size output able to reset themselves.\n","sig":null,"attributes":[{"value":"/ Trait for hash functions with variable-size output able to reset themselves.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":8827,"byte_end":8907,"line_start":251,"line_end":251,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":9152,"byte_end":9175,"line_start":257,"line_end":257,"column_start":8,"column_end":31},"name":"finalize_variable_reset","qualname":"::VariableOutputReset::finalize_variable_reset","value":"pub fn finalize_variable_reset(&mut Self, &mut [u8])\n-> Result<(), InvalidBufferSize>","parent":{"krate":0,"index":749},"children":[],"decl_id":null,"docs":" Write result into the output buffer and reset the hasher state.","sig":null,"attributes":[{"value":"/ Write result into the output buffer and reset the hasher state.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":8968,"byte_end":9035,"line_start":253,"line_end":253,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":9040,"byte_end":9043,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ Returns `Err(InvalidOutputSize)` if `out` size is not equal to","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":9048,"byte_end":9114,"line_start":255,"line_end":255,"column_start":5,"column_end":71}},{"value":"/ `self.output_size()`.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":9119,"byte_end":9144,"line_start":256,"line_end":256,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":9537,"byte_end":9557,"line_start":265,"line_end":265,"column_start":8,"column_end":28},"name":"finalize_boxed_reset","qualname":"::VariableOutputReset::finalize_boxed_reset","value":"pub fn finalize_boxed_reset(&mut Self) -> Box<[u8]>","parent":{"krate":0,"index":749},"children":[],"decl_id":null,"docs":" Retrieve result into a boxed slice and reset the hasher state.","sig":null,"attributes":[{"value":"/ Retrieve result into a boxed slice and reset the hasher state.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":9242,"byte_end":9308,"line_start":259,"line_end":259,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":9313,"byte_end":9316,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ `Box<[u8]>` is used instead of `Vec<u8>` to save stack space, since","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":9321,"byte_end":9392,"line_start":261,"line_end":261,"column_start":5,"column_end":76}},{"value":"/ they have size of 2 and 3 words respectively.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":9397,"byte_end":9446,"line_start":262,"line_end":262,"column_start":5,"column_end":54}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":9451,"byte_end":9476,"line_start":263,"line_end":263,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":826},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":9901,"byte_end":9918,"line_start":276,"line_end":276,"column_start":12,"column_end":29},"name":"InvalidOutputSize","qualname":"::InvalidOutputSize","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type used in variable hash traits.\n","sig":null,"attributes":[{"value":"/ The error type used in variable hash traits.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":9802,"byte_end":9850,"line_start":274,"line_end":274,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":835},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":10315,"byte_end":10332,"line_start":290,"line_end":290,"column_start":12,"column_end":29},"name":"InvalidBufferSize","qualname":"::InvalidBufferSize","value":"","parent":null,"children":[],"decl_id":null,"docs":" Buffer length is not equal to hash output size.\n","sig":null,"attributes":[{"value":"/ Buffer length is not equal to hash output size.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":10198,"byte_end":10249,"line_start":288,"line_end":288,"column_start":1,"column_end":52}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/ct_variable.rs","byte_start":15647,"byte_end":15668,"line_start":30,"line_end":30,"column_start":33,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/ct_variable.rs","byte_start":15960,"byte_end":15981,"line_start":41,"line_end":41,"column_start":32,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/ct_variable.rs","byte_start":16252,"byte_end":16273,"line_start":51,"line_end":51,"column_start":36,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/ct_variable.rs","byte_start":16564,"byte_end":16585,"line_start":62,"line_end":62,"column_start":33,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/ct_variable.rs","byte_start":16965,"byte_end":16986,"line_start":76,"line_end":76,"column_start":37,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/ct_variable.rs","byte_start":17287,"byte_end":17308,"line_start":87,"line_end":87,"column_start":37,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/ct_variable.rs","byte_start":17606,"byte_end":17627,"line_start":98,"line_end":98,"column_start":38,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/ct_variable.rs","byte_start":18407,"byte_end":18428,"line_start":123,"line_end":123,"column_start":30,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/ct_variable.rs","byte_start":18834,"byte_end":18855,"line_start":140,"line_end":140,"column_start":28,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/ct_variable.rs","byte_start":19196,"byte_end":19217,"line_start":154,"line_end":154,"column_start":36,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/rt_variable.rs","byte_start":20344,"byte_end":20365,"line_start":24,"line_end":24,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/rt_variable.rs","byte_start":21194,"byte_end":21215,"line_start":52,"line_end":52,"column_start":24,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/rt_variable.rs","byte_start":21432,"byte_end":21453,"line_start":62,"line_end":62,"column_start":23,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/rt_variable.rs","byte_start":21594,"byte_end":21615,"line_start":70,"line_end":70,"column_start":19,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/rt_variable.rs","byte_start":21868,"byte_end":21889,"line_start":83,"line_end":83,"column_start":20,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/rt_variable.rs","byte_start":22221,"byte_end":22242,"line_start":96,"line_end":96,"column_start":28,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/rt_variable.rs","byte_start":22886,"byte_end":22907,"line_start":122,"line_end":122,"column_start":33,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/rt_variable.rs","byte_start":23267,"byte_end":23288,"line_start":136,"line_end":136,"column_start":24,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/rt_variable.rs","byte_start":23668,"byte_end":23689,"line_start":150,"line_end":150,"column_start":28,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":24904,"byte_end":24915,"line_start":30,"line_end":30,"column_start":24,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":25128,"byte_end":25139,"line_start":40,"line_end":40,"column_start":23,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":25324,"byte_end":25335,"line_start":49,"line_end":49,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":25498,"byte_end":25509,"line_start":58,"line_end":58,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":356},{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":25988,"byte_end":25999,"line_start":79,"line_end":79,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":26171,"byte_end":26182,"line_start":88,"line_end":88,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":363},{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":26676,"byte_end":26687,"line_start":111,"line_end":111,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":26984,"byte_end":26995,"line_start":124,"line_end":124,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":27231,"byte_end":27242,"line_start":137,"line_end":137,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":27566,"byte_end":27577,"line_start":150,"line_end":150,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":27762,"byte_end":27773,"line_start":159,"line_end":159,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":28081,"byte_end":28092,"line_start":172,"line_end":172,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":28456,"byte_end":28467,"line_start":187,"line_end":187,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":386},{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":29055,"byte_end":29066,"line_start":206,"line_end":206,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":29762,"byte_end":29773,"line_start":230,"line_end":230,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":393},{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":30464,"byte_end":30475,"line_start":260,"line_end":260,"column_start":28,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":30604,"byte_end":30615,"line_start":268,"line_end":268,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/xof_reader.rs","byte_start":31295,"byte_end":31315,"line_start":21,"line_end":21,"column_start":24,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/xof_reader.rs","byte_start":31601,"byte_end":31621,"line_start":33,"line_end":33,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/xof_reader.rs","byte_start":32079,"byte_end":32099,"line_start":52,"line_end":52,"column_start":27,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":34200,"byte_end":34201,"line_start":57,"line_end":57,"column_start":65,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":529},{"krate":0,"index":531},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":37545,"byte_end":37546,"line_start":179,"line_end":179,"column_start":76,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":38986,"byte_end":38989,"line_start":232,"line_end":232,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":561}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":41737,"byte_end":41738,"line_start":72,"line_end":72,"column_start":61,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":631}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":44369,"byte_end":44377,"line_start":179,"line_end":179,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":634},{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":44712,"byte_end":44720,"line_start":193,"line_end":193,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":638}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":44872,"byte_end":44880,"line_start":200,"line_end":200,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":45033,"byte_end":45041,"line_start":207,"line_end":207,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":645}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":45201,"byte_end":45209,"line_start":214,"line_end":214,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":648}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":45360,"byte_end":45368,"line_start":221,"line_end":221,"column_start":32,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":45613,"byte_end":45621,"line_start":229,"line_end":229,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":652}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":45787,"byte_end":45795,"line_start":236,"line_end":236,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":9943,"byte_end":9960,"line_start":278,"line_end":278,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":753}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":10176,"byte_end":10193,"line_start":286,"line_end":286,"column_start":28,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":10357,"byte_end":10374,"line_start":292,"line_end":292,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":756}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":10545,"byte_end":10562,"line_start":299,"line_end":299,"column_start":28,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":2163,"byte_end":2171,"line_start":55,"line_end":55,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":9}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/ct_variable.rs","byte_start":15647,"byte_end":15668,"line_start":30,"line_end":30,"column_start":33,"column_end":54},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":758},"to":{"krate":0,"index":507}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/ct_variable.rs","byte_start":15960,"byte_end":15981,"line_start":41,"line_end":41,"column_start":32,"column_end":53},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":758},"to":{"krate":0,"index":608}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/ct_variable.rs","byte_start":16252,"byte_end":16273,"line_start":51,"line_end":51,"column_start":36,"column_end":57},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":758},"to":{"krate":24,"index":26}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/ct_variable.rs","byte_start":16564,"byte_end":16585,"line_start":62,"line_end":62,"column_start":33,"column_end":54},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":758},"to":{"krate":0,"index":462}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/ct_variable.rs","byte_start":16965,"byte_end":16986,"line_start":76,"line_end":76,"column_start":37,"column_end":58},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":758},"to":{"krate":24,"index":34}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/ct_variable.rs","byte_start":17287,"byte_end":17308,"line_start":87,"line_end":87,"column_start":37,"column_end":58},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":758},"to":{"krate":0,"index":464}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/ct_variable.rs","byte_start":17606,"byte_end":17627,"line_start":98,"line_end":98,"column_start":38,"column_end":59},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":758},"to":{"krate":0,"index":466}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/ct_variable.rs","byte_start":18407,"byte_end":18428,"line_start":123,"line_end":123,"column_start":30,"column_end":51},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":758},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/ct_variable.rs","byte_start":18834,"byte_end":18855,"line_start":140,"line_end":140,"column_start":28,"column_end":49},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":758},"to":{"krate":24,"index":42}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/ct_variable.rs","byte_start":19196,"byte_end":19217,"line_start":154,"line_end":154,"column_start":36,"column_end":57},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":758},"to":{"krate":24,"index":44}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/rt_variable.rs","byte_start":20344,"byte_end":20365,"line_start":24,"line_end":24,"column_start":9,"column_end":30},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":767},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/rt_variable.rs","byte_start":21194,"byte_end":21215,"line_start":52,"line_end":52,"column_start":24,"column_end":45},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":767},"to":{"krate":0,"index":507}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/rt_variable.rs","byte_start":21432,"byte_end":21453,"line_start":62,"line_end":62,"column_start":23,"column_end":44},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":767},"to":{"krate":0,"index":608}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/rt_variable.rs","byte_start":21594,"byte_end":21615,"line_start":70,"line_end":70,"column_start":19,"column_end":40},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":767},"to":{"krate":24,"index":42}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/rt_variable.rs","byte_start":21868,"byte_end":21889,"line_start":83,"line_end":83,"column_start":20,"column_end":41},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":767},"to":{"krate":0,"index":716}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/rt_variable.rs","byte_start":22221,"byte_end":22242,"line_start":96,"line_end":96,"column_start":28,"column_end":49},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":767},"to":{"krate":0,"index":740}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/rt_variable.rs","byte_start":22886,"byte_end":22907,"line_start":122,"line_end":122,"column_start":33,"column_end":54},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":767},"to":{"krate":0,"index":749}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/rt_variable.rs","byte_start":23267,"byte_end":23288,"line_start":136,"line_end":136,"column_start":24,"column_end":45},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":767},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/rt_variable.rs","byte_start":23668,"byte_end":23689,"line_start":150,"line_end":150,"column_start":28,"column_end":49},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":767},"to":{"krate":5,"index":4406}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":24904,"byte_end":24915,"line_start":30,"line_end":30,"column_start":24,"column_end":35},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":775},"to":{"krate":0,"index":507}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":25128,"byte_end":25139,"line_start":40,"line_end":40,"column_start":23,"column_end":34},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":775},"to":{"krate":0,"index":608}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":25324,"byte_end":25335,"line_start":49,"line_end":49,"column_start":27,"column_end":38},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":775},"to":{"krate":24,"index":26}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":25498,"byte_end":25509,"line_start":58,"line_end":58,"column_start":9,"column_end":20},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":775},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":25988,"byte_end":25999,"line_start":79,"line_end":79,"column_start":25,"column_end":36},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":775},"to":{"krate":24,"index":36}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":26171,"byte_end":26182,"line_start":88,"line_end":88,"column_start":21,"column_end":32},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":775},"to":{"krate":24,"index":46}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":26676,"byte_end":26687,"line_start":111,"line_end":111,"column_start":24,"column_end":35},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":775},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":26984,"byte_end":26995,"line_start":124,"line_end":124,"column_start":19,"column_end":30},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":775},"to":{"krate":24,"index":42}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":27231,"byte_end":27242,"line_start":137,"line_end":137,"column_start":20,"column_end":31},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":775},"to":{"krate":0,"index":716}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":27566,"byte_end":27577,"line_start":150,"line_end":150,"column_start":28,"column_end":39},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":775},"to":{"krate":24,"index":34}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":27762,"byte_end":27773,"line_start":159,"line_end":159,"column_start":25,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":775},"to":{"krate":0,"index":720}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":28081,"byte_end":28092,"line_start":172,"line_end":172,"column_start":30,"column_end":41},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":775},"to":{"krate":0,"index":723}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":28456,"byte_end":28467,"line_start":187,"line_end":187,"column_start":30,"column_end":41},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":775},"to":{"krate":0,"index":729}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":29055,"byte_end":29066,"line_start":206,"line_end":206,"column_start":35,"column_end":46},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":775},"to":{"krate":0,"index":736}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":29762,"byte_end":29773,"line_start":230,"line_end":230,"column_start":28,"column_end":39},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":775},"to":{"krate":5,"index":4406}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":30329,"byte_end":30335,"line_start":251,"line_end":251,"column_start":30,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":398},"to":{"krate":0,"index":395}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":30464,"byte_end":30475,"line_start":260,"line_end":260,"column_start":28,"column_end":39},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":775},"to":{"krate":0,"index":398}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/wrapper.rs","byte_start":30604,"byte_end":30615,"line_start":268,"line_end":268,"column_start":23,"column_end":34},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":775},"to":{"krate":0,"index":395}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/xof_reader.rs","byte_start":31295,"byte_end":31315,"line_start":21,"line_end":21,"column_start":24,"column_end":44},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":785},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/xof_reader.rs","byte_start":31601,"byte_end":31621,"line_start":33,"line_end":33,"column_start":23,"column_end":43},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":785},"to":{"krate":0,"index":726}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api/xof_reader.rs","byte_start":32079,"byte_end":32099,"line_start":52,"line_end":52,"column_start":27,"column_end":47},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":785},"to":{"krate":5,"index":4346}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":11528,"byte_end":11541,"line_start":29,"line_end":29,"column_start":23,"column_end":36},"kind":"SuperTrait","from":{"krate":24,"index":26},"to":{"krate":0,"index":462}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":11734,"byte_end":11747,"line_start":35,"line_end":35,"column_start":27,"column_end":40},"kind":"SuperTrait","from":{"krate":24,"index":26},"to":{"krate":0,"index":464}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":11923,"byte_end":11933,"line_start":41,"line_end":41,"column_start":28,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":462},"to":{"krate":0,"index":466}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":11936,"byte_end":11950,"line_start":41,"line_end":41,"column_start":41,"column_end":55},"kind":"SuperTrait","from":{"krate":0,"index":464},"to":{"krate":0,"index":466}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":11953,"byte_end":11967,"line_start":41,"line_end":41,"column_start":58,"column_end":72},"kind":"SuperTrait","from":{"krate":24,"index":34},"to":{"krate":0,"index":466}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":12402,"byte_end":12412,"line_start":52,"line_end":52,"column_start":33,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":462},"to":{"krate":0,"index":468}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":12415,"byte_end":12429,"line_start":52,"line_end":52,"column_start":46,"column_end":60},"kind":"SuperTrait","from":{"krate":0,"index":464},"to":{"krate":0,"index":468}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":12879,"byte_end":12892,"line_start":66,"line_end":66,"column_start":26,"column_end":39},"kind":"SuperTrait","from":{"krate":24,"index":26},"to":{"krate":0,"index":471}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":13536,"byte_end":13546,"line_start":82,"line_end":82,"column_start":31,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":462},"to":{"krate":0,"index":473}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":13549,"byte_end":13563,"line_start":82,"line_end":82,"column_start":44,"column_end":58},"kind":"SuperTrait","from":{"krate":24,"index":34},"to":{"krate":0,"index":473}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":13566,"byte_end":13580,"line_start":82,"line_end":82,"column_start":61,"column_end":75},"kind":"SuperTrait","from":{"krate":0,"index":464},"to":{"krate":0,"index":473}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/core_api.rs","byte_start":13583,"byte_end":13588,"line_start":82,"line_end":82,"column_start":78,"column_end":83},"kind":"SuperTrait","from":{"krate":1,"index":3021},"to":{"krate":0,"index":473}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":32911,"byte_end":32925,"line_start":16,"line_end":16,"column_start":19,"column_end":33},"kind":"SuperTrait","from":{"krate":24,"index":34},"to":{"krate":0,"index":508}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":34200,"byte_end":34201,"line_start":57,"line_end":57,"column_start":65,"column_end":66},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":525},"to":{"krate":0,"index":508}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":37545,"byte_end":37546,"line_start":179,"line_end":179,"column_start":76,"column_end":77},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":551},"to":{"krate":0,"index":541}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/digest.rs","byte_start":38986,"byte_end":38989,"line_start":232,"line_end":232,"column_start":16,"column_end":19},"kind":{"Impl":{"id":41}},"from":{"krate":4,"index":313},"to":{"krate":1,"index":2637}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":39805,"byte_end":39816,"line_start":19,"line_end":19,"column_start":16,"column_end":27},"kind":"SuperTrait","from":{"krate":24,"index":36},"to":{"krate":0,"index":609}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":39819,"byte_end":39833,"line_start":19,"line_end":19,"column_start":30,"column_end":44},"kind":"SuperTrait","from":{"krate":24,"index":34},"to":{"krate":0,"index":609}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":39836,"byte_end":39841,"line_start":19,"line_end":19,"column_start":47,"column_end":52},"kind":"SuperTrait","from":{"krate":1,"index":3021},"to":{"krate":0,"index":609}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":41737,"byte_end":41738,"line_start":72,"line_end":72,"column_start":61,"column_end":62},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":621},"to":{"krate":0,"index":609}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":44369,"byte_end":44377,"line_start":179,"line_end":179,"column_start":25,"column_end":33},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":805},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":44712,"byte_end":44720,"line_start":193,"line_end":193,"column_start":45,"column_end":53},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":805},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":44872,"byte_end":44880,"line_start":200,"line_end":200,"column_start":53,"column_end":61},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":805},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":45033,"byte_end":45041,"line_start":207,"line_end":207,"column_start":44,"column_end":52},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":805},"to":{"krate":26,"index":58}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":45201,"byte_end":45209,"line_start":214,"line_end":214,"column_start":39,"column_end":47},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":805},"to":{"krate":1,"index":2667}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":45360,"byte_end":45368,"line_start":221,"line_end":221,"column_start":32,"column_end":40},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":805},"to":{"krate":1,"index":2672}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":45613,"byte_end":45621,"line_start":229,"line_end":229,"column_start":23,"column_end":31},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":811},"to":{"krate":1,"index":9401}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/mac.rs","byte_start":45787,"byte_end":45795,"line_start":236,"line_end":236,"column_start":28,"column_end":36},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":811},"to":{"krate":5,"index":2338}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":3117,"byte_end":3123,"line_start":91,"line_end":91,"column_start":24,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":716},"to":{"krate":0,"index":720}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":3126,"byte_end":3140,"line_start":91,"line_end":91,"column_start":33,"column_end":47},"kind":"SuperTrait","from":{"krate":24,"index":34},"to":{"krate":0,"index":720}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":3143,"byte_end":3148,"line_start":91,"line_end":91,"column_start":50,"column_end":55},"kind":"SuperTrait","from":{"krate":1,"index":3021},"to":{"krate":0,"index":720}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":3588,"byte_end":3599,"line_start":105,"line_end":105,"column_start":29,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":720},"to":{"krate":0,"index":723}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":3602,"byte_end":3607,"line_start":105,"line_end":105,"column_start":43,"column_end":48},"kind":"SuperTrait","from":{"krate":24,"index":42},"to":{"krate":0,"index":723}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":4861,"byte_end":4866,"line_start":140,"line_end":140,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":3021},"to":{"krate":0,"index":729}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":4869,"byte_end":4875,"line_start":140,"line_end":140,"column_start":37,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":716},"to":{"krate":0,"index":729}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":6088,"byte_end":6104,"line_start":177,"line_end":177,"column_start":34,"column_end":50},"kind":"SuperTrait","from":{"krate":0,"index":729},"to":{"krate":0,"index":736}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":6107,"byte_end":6112,"line_start":177,"line_end":177,"column_start":53,"column_end":58},"kind":"SuperTrait","from":{"krate":24,"index":42},"to":{"krate":0,"index":736}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":7032,"byte_end":7037,"line_start":201,"line_end":201,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":3021},"to":{"krate":0,"index":740}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":7040,"byte_end":7046,"line_start":201,"line_end":201,"column_start":35,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":716},"to":{"krate":0,"index":740}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":8939,"byte_end":8953,"line_start":252,"line_end":252,"column_start":32,"column_end":46},"kind":"SuperTrait","from":{"krate":0,"index":740},"to":{"krate":0,"index":749}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":8956,"byte_end":8961,"line_start":252,"line_end":252,"column_start":49,"column_end":54},"kind":"SuperTrait","from":{"krate":24,"index":42},"to":{"krate":0,"index":749}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":9943,"byte_end":9960,"line_start":278,"line_end":278,"column_start":23,"column_end":40},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":826},"to":{"krate":1,"index":9401}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":10176,"byte_end":10193,"line_start":286,"line_end":286,"column_start":28,"column_end":45},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":826},"to":{"krate":5,"index":2338}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":10357,"byte_end":10374,"line_start":292,"line_end":292,"column_start":23,"column_end":40},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":835},"to":{"krate":1,"index":9401}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.1/src/lib.rs","byte_start":10545,"byte_end":10562,"line_start":299,"line_end":299,"column_start":28,"column_end":45},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":835},"to":{"krate":5,"index":2338}}]}