{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0","program":"/home/fury/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","zeroize","--edition=2018","/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","-C","metadata=5a66bf4f94ba7abf","-C","extra-filename=-5a66bf4f94ba7abf","--out-dir","/home/fury/Rust/apollo/goblin-army-solana-nft-staking-react/backend/staking_program/target/rls/debug/deps","-L","dependency=/home/fury/Rust/apollo/goblin-army-solana-nft-staking-react/backend/staking_program/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/fury/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/fury/Rust/apollo/goblin-army-solana-nft-staking-react/backend/staking_program/target/rls/debug/deps/libzeroize-5a66bf4f94ba7abf.rmeta"},"prelude":{"crate_id":{"name":"zeroize","disambiguator":[7172808746567234147,0]},"crate_root":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src","external_crates":[{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[8373705112501149482,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[16909867051943430517,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11260902004430380252,0]}},{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[10608756751411298727,0]}}],"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":0,"byte_end":27661,"line_start":1,"line_end":867,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":0,"byte_end":27661,"line_start":1,"line_end":867,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":57},{"krate":0,"index":60},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":111},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":112},{"krate":0,"index":223},{"krate":0,"index":225},{"krate":0,"index":227},{"krate":0,"index":229},{"krate":0,"index":231},{"krate":0,"index":233},{"krate":0,"index":235},{"krate":0,"index":237},{"krate":0,"index":239},{"krate":0,"index":241},{"krate":0,"index":243},{"krate":0,"index":245},{"krate":0,"index":113},{"krate":0,"index":118},{"krate":0,"index":122},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":131},{"krate":0,"index":134},{"krate":0,"index":137},{"krate":0,"index":143},{"krate":0,"index":145},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":247},{"krate":0,"index":251},{"krate":0,"index":254},{"krate":0,"index":257},{"krate":0,"index":259},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":154},{"krate":0,"index":157},{"krate":0,"index":161},{"krate":0,"index":164},{"krate":0,"index":168},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":268},{"krate":0,"index":272},{"krate":0,"index":275},{"krate":0,"index":280},{"krate":0,"index":284},{"krate":0,"index":290},{"krate":0,"index":295},{"krate":0,"index":302},{"krate":0,"index":308},{"krate":0,"index":316},{"krate":0,"index":323},{"krate":0,"index":332},{"krate":0,"index":340},{"krate":0,"index":350},{"krate":0,"index":359},{"krate":0,"index":370},{"krate":0,"index":380},{"krate":0,"index":392}],"decl_id":null,"docs":" Securely zero memory with a simple trait ([`Zeroize`]) built on stable Rust\n primitives which guarantee the operation will not be \"optimized away\".","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs, rust_2018_idioms, unused_qualifications)","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":300,"byte_end":363,"line_start":8,"line_end":8,"column_start":1,"column_end":64}},{"value":"/ Securely zero memory with a simple trait ([`Zeroize`]) built on stable Rust","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":365,"byte_end":444,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ primitives which guarantee the operation will not be \"optimized away\".","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":445,"byte_end":519,"line_start":11,"line_end":11,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":520,"byte_end":523,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ## About","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":524,"byte_end":536,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":537,"byte_end":540,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [Zeroing memory securely is hard] - compilers optimize for performance, and","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":541,"byte_end":620,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ in doing so they love to \"optimize away\" unnecessary zeroing calls. There are","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":621,"byte_end":702,"line_start":16,"line_end":16,"column_start":1,"column_end":82}},{"value":"/ many documented \"tricks\" to attempt to avoid these optimizations and ensure","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":703,"byte_end":782,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ that a zeroing routine is performed reliably.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":783,"byte_end":832,"line_start":18,"line_end":18,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":833,"byte_end":836,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This crate isn't about tricks: it uses [`core::ptr::write_volatile`]","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":837,"byte_end":909,"line_start":20,"line_end":20,"column_start":1,"column_end":73}},{"value":"/ and [`core::sync::atomic`] memory fences to provide easy-to-use, portable","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":910,"byte_end":987,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/ zeroing behavior which works on all of Rust's core number types and slices","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":988,"byte_end":1066,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ thereof, implemented in pure Rust with no usage of FFI or assembly.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1067,"byte_end":1138,"line_start":23,"line_end":23,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1139,"byte_end":1142,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ - No insecure fallbacks!","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1143,"byte_end":1171,"line_start":25,"line_end":25,"column_start":1,"column_end":29}},{"value":"/ - No dependencies!","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1172,"byte_end":1194,"line_start":26,"line_end":26,"column_start":1,"column_end":23}},{"value":"/ - No FFI or inline assembly! **WASM friendly** (and tested)!","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1195,"byte_end":1259,"line_start":27,"line_end":27,"column_start":1,"column_end":65}},{"value":"/ - `#![no_std]` i.e. **embedded-friendly**!","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1260,"byte_end":1306,"line_start":28,"line_end":28,"column_start":1,"column_end":47}},{"value":"/ - No functionality besides securely zeroing memory!","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1307,"byte_end":1362,"line_start":29,"line_end":29,"column_start":1,"column_end":56}},{"value":"/ - (Optional) Custom derive support for zeroing complex structures","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1363,"byte_end":1432,"line_start":30,"line_end":30,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1433,"byte_end":1436,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ## Minimum Supported Rust Version","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1437,"byte_end":1474,"line_start":32,"line_end":32,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1475,"byte_end":1478,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Requires Rust **1.51** or newer.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1479,"byte_end":1515,"line_start":34,"line_end":34,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1516,"byte_end":1519,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ In the future, we reserve the right to change MSRV (i.e. MSRV is out-of-scope","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1520,"byte_end":1601,"line_start":36,"line_end":36,"column_start":1,"column_end":82}},{"value":"/ for this crate's SemVer guarantees), however when we do it will be accompanied","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1602,"byte_end":1684,"line_start":37,"line_end":37,"column_start":1,"column_end":83}},{"value":"/ by a minor version bump.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1685,"byte_end":1713,"line_start":38,"line_end":38,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1714,"byte_end":1717,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1718,"byte_end":1730,"line_start":40,"line_end":40,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1731,"byte_end":1734,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1735,"byte_end":1742,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/ use zeroize::Zeroize;","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1743,"byte_end":1768,"line_start":43,"line_end":43,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1769,"byte_end":1772,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1773,"byte_end":1788,"line_start":45,"line_end":45,"column_start":1,"column_end":16}},{"value":"/     // Protip: don't embed secrets in your source code.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1789,"byte_end":1848,"line_start":46,"line_end":46,"column_start":1,"column_end":60}},{"value":"/     // This is just an example.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1849,"byte_end":1884,"line_start":47,"line_end":47,"column_start":1,"column_end":36}},{"value":"/     let mut secret = b\"Air shield password: 1,2,3,4,5\".to_vec();","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1885,"byte_end":1953,"line_start":48,"line_end":48,"column_start":1,"column_end":69}},{"value":"/     // [ ... ] open the air shield here","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1954,"byte_end":1997,"line_start":49,"line_end":49,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":1998,"byte_end":2001,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/     // Now that we're done using the secret, zero it out.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":2002,"byte_end":2063,"line_start":51,"line_end":51,"column_start":1,"column_end":62}},{"value":"/     secret.zeroize();","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":2064,"byte_end":2089,"line_start":52,"line_end":52,"column_start":1,"column_end":26}},{"value":"/ }","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":2090,"byte_end":2095,"line_start":53,"line_end":53,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":2096,"byte_end":2103,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":2104,"byte_end":2107,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ The [`Zeroize`] trait is impl'd on all of Rust's core scalar types including","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":2108,"byte_end":2188,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"/ integers, floats, `bool`, and `char`.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":2189,"byte_end":2230,"line_start":57,"line_end":57,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":2231,"byte_end":2234,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ Additionally, it's implemented on slices and `IterMut`s of the above types.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":2235,"byte_end":2314,"line_start":59,"line_end":59,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":2315,"byte_end":2318,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ When the `alloc` feature is enabled (which it is by default), it's also","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":2319,"byte_end":2394,"line_start":61,"line_end":61,"column_start":1,"column_end":76}},{"value":"/ impl'd for `Vec<T>` for the above types as well as `String`, where it provides","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":2395,"byte_end":2477,"line_start":62,"line_end":62,"column_start":1,"column_end":83}},{"value":"/ [`Vec::clear`] / [`String::clear`]-like behavior (truncating to zero-length)","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":2478,"byte_end":2558,"line_start":63,"line_end":63,"column_start":1,"column_end":81}},{"value":"/ but ensures the backing memory is securely zeroed with some caveats.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":2559,"byte_end":2631,"line_start":64,"line_end":64,"column_start":1,"column_end":73}},{"value":"/ (NOTE: see \"Stack/Heap Zeroing Notes\" for important `Vec`/`String` details)","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":2632,"byte_end":2711,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":2712,"byte_end":2715,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ The [`DefaultIsZeroes`] marker trait can be impl'd on types which also","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":2716,"byte_end":2790,"line_start":67,"line_end":67,"column_start":1,"column_end":75}},{"value":"/ impl [`Default`], which implements [`Zeroize`] by overwriting a value with","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":2791,"byte_end":2869,"line_start":68,"line_end":68,"column_start":1,"column_end":79}},{"value":"/ the default value.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":2870,"byte_end":2892,"line_start":69,"line_end":69,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":2893,"byte_end":2896,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ## Custom Derive Support","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":2897,"byte_end":2925,"line_start":71,"line_end":71,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":2926,"byte_end":2929,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ This crate has custom derive support for the `Zeroize` trait,","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":2930,"byte_end":2995,"line_start":73,"line_end":73,"column_start":1,"column_end":66}},{"value":"/ gated under the `zeroize` crate's `zeroize_derive` Cargo feature,","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":2996,"byte_end":3065,"line_start":74,"line_end":74,"column_start":1,"column_end":70}},{"value":"/ which automatically calls `zeroize()` on all members of a struct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3066,"byte_end":3134,"line_start":75,"line_end":75,"column_start":1,"column_end":69}},{"value":"/ or tuple struct.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3135,"byte_end":3155,"line_start":76,"line_end":76,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3156,"byte_end":3159,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ Attributes supported for `Zeroize`:","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3160,"byte_end":3199,"line_start":78,"line_end":78,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3200,"byte_end":3203,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ On the item level:","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3204,"byte_end":3226,"line_start":80,"line_end":80,"column_start":1,"column_end":23}},{"value":"/ - `#[zeroize(drop)]`: *deprecated* use `ZeroizeOnDrop` instead","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3227,"byte_end":3293,"line_start":81,"line_end":81,"column_start":1,"column_end":67}},{"value":"/ - `#[zeroize(bound = \"T: MyTrait\")]`: this replaces any trait bounds","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3294,"byte_end":3366,"line_start":82,"line_end":82,"column_start":1,"column_end":73}},{"value":"/   inferred by zeroize","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3367,"byte_end":3392,"line_start":83,"line_end":83,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3393,"byte_end":3396,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ On the field level:","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3397,"byte_end":3420,"line_start":85,"line_end":85,"column_start":1,"column_end":24}},{"value":"/ - `#[zeroize(skip)]`: skips this field or variant when calling `zeroize()`","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3421,"byte_end":3499,"line_start":86,"line_end":86,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3500,"byte_end":3503,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ Attributes supported for `ZeroizeOnDrop`:","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3504,"byte_end":3549,"line_start":88,"line_end":88,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3550,"byte_end":3553,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ On the field level:","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3554,"byte_end":3577,"line_start":90,"line_end":90,"column_start":1,"column_end":24}},{"value":"/ - `#[zeroize(skip)]`: skips this field or variant when calling `zeroize()`","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3578,"byte_end":3656,"line_start":91,"line_end":91,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3657,"byte_end":3660,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ Example which derives `Drop`:","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3661,"byte_end":3694,"line_start":93,"line_end":93,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3695,"byte_end":3698,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3699,"byte_end":3706,"line_start":95,"line_end":95,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"zeroize_derive\")]","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3707,"byte_end":3747,"line_start":96,"line_end":96,"column_start":1,"column_end":41}},{"value":"/ # {","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3748,"byte_end":3755,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/ use zeroize::{Zeroize, ZeroizeOnDrop};","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3756,"byte_end":3798,"line_start":98,"line_end":98,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3799,"byte_end":3802,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ // This struct will be zeroized on drop","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3803,"byte_end":3846,"line_start":100,"line_end":100,"column_start":1,"column_end":44}},{"value":"/ #[derive(Zeroize, ZeroizeOnDrop)]","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3847,"byte_end":3884,"line_start":101,"line_end":101,"column_start":1,"column_end":38}},{"value":"/ struct MyStruct([u8; 32]);","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3885,"byte_end":3915,"line_start":102,"line_end":102,"column_start":1,"column_end":31}},{"value":"/ # }","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3916,"byte_end":3923,"line_start":103,"line_end":103,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3924,"byte_end":3931,"line_start":104,"line_end":104,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3932,"byte_end":3935,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ Example which does not derive `Drop` (useful for e.g. `Copy` types)","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":3936,"byte_end":4007,"line_start":106,"line_end":106,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4008,"byte_end":4011,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4012,"byte_end":4019,"line_start":108,"line_end":108,"column_start":1,"column_end":8}},{"value":"/ #[cfg(feature = \"zeroize_derive\")]","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4020,"byte_end":4058,"line_start":109,"line_end":109,"column_start":1,"column_end":39}},{"value":"/ # {","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4059,"byte_end":4066,"line_start":110,"line_end":110,"column_start":1,"column_end":8}},{"value":"/ use zeroize::Zeroize;","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4067,"byte_end":4092,"line_start":111,"line_end":111,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4093,"byte_end":4096,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ // This struct will *NOT* be zeroized on drop","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4097,"byte_end":4146,"line_start":113,"line_end":113,"column_start":1,"column_end":50}},{"value":"/ #[derive(Copy, Clone, Zeroize)]","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4147,"byte_end":4182,"line_start":114,"line_end":114,"column_start":1,"column_end":36}},{"value":"/ struct MyStruct([u8; 32]);","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4183,"byte_end":4213,"line_start":115,"line_end":115,"column_start":1,"column_end":31}},{"value":"/ # }","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4214,"byte_end":4221,"line_start":116,"line_end":116,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4222,"byte_end":4229,"line_start":117,"line_end":117,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4230,"byte_end":4233,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ Example which only derives `Drop`:","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4234,"byte_end":4272,"line_start":119,"line_end":119,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4273,"byte_end":4276,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4277,"byte_end":4284,"line_start":121,"line_end":121,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"zeroize_derive\")]","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4285,"byte_end":4325,"line_start":122,"line_end":122,"column_start":1,"column_end":41}},{"value":"/ # {","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4326,"byte_end":4333,"line_start":123,"line_end":123,"column_start":1,"column_end":8}},{"value":"/ use zeroize::ZeroizeOnDrop;","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4334,"byte_end":4365,"line_start":124,"line_end":124,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4366,"byte_end":4369,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ // This struct will be zeroized on drop","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4370,"byte_end":4413,"line_start":126,"line_end":126,"column_start":1,"column_end":44}},{"value":"/ #[derive(ZeroizeOnDrop)]","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4414,"byte_end":4442,"line_start":127,"line_end":127,"column_start":1,"column_end":29}},{"value":"/ struct MyStruct([u8; 32]);","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4443,"byte_end":4473,"line_start":128,"line_end":128,"column_start":1,"column_end":31}},{"value":"/ # }","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4474,"byte_end":4481,"line_start":129,"line_end":129,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4482,"byte_end":4489,"line_start":130,"line_end":130,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4490,"byte_end":4493,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ ## `Zeroizing<Z>`: wrapper for zeroizing arbitrary values on drop","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4494,"byte_end":4563,"line_start":132,"line_end":132,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4564,"byte_end":4567,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ `Zeroizing<Z: Zeroize>` is a generic wrapper type that impls `Deref`","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4568,"byte_end":4640,"line_start":134,"line_end":134,"column_start":1,"column_end":73}},{"value":"/ and `DerefMut`, allowing access to an inner value of type `Z`, and also","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4641,"byte_end":4716,"line_start":135,"line_end":135,"column_start":1,"column_end":76}},{"value":"/ impls a `Drop` handler which calls `zeroize()` on its contents:","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4717,"byte_end":4784,"line_start":136,"line_end":136,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4785,"byte_end":4788,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4789,"byte_end":4796,"line_start":138,"line_end":138,"column_start":1,"column_end":8}},{"value":"/ use zeroize::Zeroizing;","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4797,"byte_end":4824,"line_start":139,"line_end":139,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4825,"byte_end":4828,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4829,"byte_end":4844,"line_start":141,"line_end":141,"column_start":1,"column_end":16}},{"value":"/     let mut secret = Zeroizing::new([0u8; 5]);","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4845,"byte_end":4895,"line_start":142,"line_end":142,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4896,"byte_end":4899,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/     // Set the air shield password","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4900,"byte_end":4938,"line_start":144,"line_end":144,"column_start":1,"column_end":39}},{"value":"/     // Protip (again): don't embed secrets in your source code.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":4939,"byte_end":5006,"line_start":145,"line_end":145,"column_start":1,"column_end":68}},{"value":"/     secret.copy_from_slice(&[1, 2, 3, 4, 5]);","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":5007,"byte_end":5056,"line_start":146,"line_end":146,"column_start":1,"column_end":50}},{"value":"/     assert_eq!(secret.as_ref(), &[1, 2, 3, 4, 5]);","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":5057,"byte_end":5111,"line_start":147,"line_end":147,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":5112,"byte_end":5115,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/     // The contents of `secret` will be automatically zeroized on drop","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":5116,"byte_end":5190,"line_start":149,"line_end":149,"column_start":1,"column_end":75}},{"value":"/ }","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":5191,"byte_end":5196,"line_start":150,"line_end":150,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":5197,"byte_end":5204,"line_start":151,"line_end":151,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":5205,"byte_end":5208,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ ## What guarantees does this crate provide?","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":5209,"byte_end":5256,"line_start":153,"line_end":153,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":5257,"byte_end":5260,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ This crate guarantees the following:","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":5261,"byte_end":5301,"line_start":155,"line_end":155,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":5302,"byte_end":5305,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ 1. The zeroing operation can't be \"optimized away\" by the compiler.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":5306,"byte_end":5377,"line_start":157,"line_end":157,"column_start":1,"column_end":72}},{"value":"/ 2. All subsequent reads to memory will see \"zeroized\" values.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":5378,"byte_end":5443,"line_start":158,"line_end":158,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":5444,"byte_end":5447,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ LLVM's volatile semantics ensure #1 is true.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":5448,"byte_end":5496,"line_start":160,"line_end":160,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":5497,"byte_end":5500,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ Additionally, thanks to work by the [Unsafe Code Guidelines Working Group],","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":5501,"byte_end":5580,"line_start":162,"line_end":162,"column_start":1,"column_end":80}},{"value":"/ we can now fairly confidently say #2 is true as well. Previously there were","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":5581,"byte_end":5660,"line_start":163,"line_end":163,"column_start":1,"column_end":80}},{"value":"/ worries that the approach used by this crate (mixing volatile and","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":5661,"byte_end":5730,"line_start":164,"line_end":164,"column_start":1,"column_end":70}},{"value":"/ non-volatile accesses) was undefined behavior due to language contained","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":5731,"byte_end":5806,"line_start":165,"line_end":165,"column_start":1,"column_end":76}},{"value":"/ in the documentation for `write_volatile`, however after some discussion","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":5807,"byte_end":5883,"line_start":166,"line_end":166,"column_start":1,"column_end":77}},{"value":"/ [these remarks have been removed] and the specific usage pattern in this","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":5884,"byte_end":5960,"line_start":167,"line_end":167,"column_start":1,"column_end":77}},{"value":"/ crate is considered to be well-defined.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":5961,"byte_end":6004,"line_start":168,"line_end":168,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":6005,"byte_end":6008,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ Additionally this crate leverages [`core::sync::atomic::compiler_fence`]","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":6009,"byte_end":6085,"line_start":170,"line_end":170,"column_start":1,"column_end":77}},{"value":"/ with the strictest ordering","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":6086,"byte_end":6117,"line_start":171,"line_end":171,"column_start":1,"column_end":32}},{"value":"/ ([`Ordering::SeqCst`]) as a","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":6118,"byte_end":6149,"line_start":172,"line_end":172,"column_start":1,"column_end":32}},{"value":"/ precaution to help ensure reads are not reordered before memory has been","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":6150,"byte_end":6226,"line_start":173,"line_end":173,"column_start":1,"column_end":77}},{"value":"/ zeroed.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":6227,"byte_end":6238,"line_start":174,"line_end":174,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":6239,"byte_end":6242,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ All of that said, there is still potential for microarchitectural attacks","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":6243,"byte_end":6320,"line_start":176,"line_end":176,"column_start":1,"column_end":78}},{"value":"/ (ala Spectre/Meltdown) to leak \"zeroized\" secrets through covert channels.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":6321,"byte_end":6399,"line_start":177,"line_end":177,"column_start":1,"column_end":79}},{"value":"/ This crate makes no guarantees that zeroized values cannot be leaked","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":6400,"byte_end":6472,"line_start":178,"line_end":178,"column_start":1,"column_end":73}},{"value":"/ through such channels, as they represent flaws in the underlying hardware.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":6473,"byte_end":6551,"line_start":179,"line_end":179,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":6552,"byte_end":6555,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ ## Stack/Heap Zeroing Notes","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":6556,"byte_end":6587,"line_start":181,"line_end":181,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":6588,"byte_end":6591,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ This crate can be used to zero values from either the stack or the heap.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":6592,"byte_end":6668,"line_start":183,"line_end":183,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":6669,"byte_end":6672,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ However, be aware several operations in Rust can unintentionally leave","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":6673,"byte_end":6747,"line_start":185,"line_end":185,"column_start":1,"column_end":75}},{"value":"/ copies of data in memory. This includes but is not limited to:","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":6748,"byte_end":6814,"line_start":186,"line_end":186,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":6815,"byte_end":6818,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ - Moves and [`Copy`]","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":6819,"byte_end":6843,"line_start":188,"line_end":188,"column_start":1,"column_end":25}},{"value":"/ - Heap reallocation when using [`Vec`] and [`String`]","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":6844,"byte_end":6901,"line_start":189,"line_end":189,"column_start":1,"column_end":58}},{"value":"/ - Borrowers of a reference making copies of the data","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":6902,"byte_end":6958,"line_start":190,"line_end":190,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":6959,"byte_end":6962,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ [`Pin`][`core::pin::Pin`] can be leveraged in conjunction with this crate","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":6963,"byte_end":7040,"line_start":192,"line_end":192,"column_start":1,"column_end":78}},{"value":"/ to ensure data kept on the stack isn't moved.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":7041,"byte_end":7090,"line_start":193,"line_end":193,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":7091,"byte_end":7094,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ The `Zeroize` impls for `Vec` and `String` zeroize the entire capacity of","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":7095,"byte_end":7172,"line_start":195,"line_end":195,"column_start":1,"column_end":78}},{"value":"/ their backing buffer, but cannot guarantee copies of the data were not","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":7173,"byte_end":7247,"line_start":196,"line_end":196,"column_start":1,"column_end":75}},{"value":"/ previously made by buffer reallocation. It's therefore important when","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":7248,"byte_end":7321,"line_start":197,"line_end":197,"column_start":1,"column_end":74}},{"value":"/ attempting to zeroize such buffers to initialize them to the correct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":7322,"byte_end":7394,"line_start":198,"line_end":198,"column_start":1,"column_end":73}},{"value":"/ capacity, and take care to prevent subsequent reallocation.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":7395,"byte_end":7458,"line_start":199,"line_end":199,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":7459,"byte_end":7462,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ The `secrecy` crate provides higher-level abstractions for eliminating","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":7463,"byte_end":7537,"line_start":201,"line_end":201,"column_start":1,"column_end":75}},{"value":"/ usage patterns which can cause reallocations:","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":7538,"byte_end":7587,"line_start":202,"line_end":202,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":7588,"byte_end":7591,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ <https://crates.io/crates/secrecy>","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":7592,"byte_end":7630,"line_start":204,"line_end":204,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":7631,"byte_end":7634,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ ## What about: clearing registers, mlock, mprotect, etc?","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":7635,"byte_end":7695,"line_start":206,"line_end":206,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":7696,"byte_end":7699,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ This crate is focused on providing simple, unobtrusive support for reliably","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":7700,"byte_end":7779,"line_start":208,"line_end":208,"column_start":1,"column_end":80}},{"value":"/ zeroing memory using the best approach possible on stable Rust.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":7780,"byte_end":7847,"line_start":209,"line_end":209,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":7848,"byte_end":7851,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ Clearing registers is a difficult problem that can't easily be solved by","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":7852,"byte_end":7928,"line_start":211,"line_end":211,"column_start":1,"column_end":77}},{"value":"/ something like a crate, and requires either inline ASM or rustc support.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":7929,"byte_end":8005,"line_start":212,"line_end":212,"column_start":1,"column_end":77}},{"value":"/ See <https://github.com/rust-lang/rust/issues/17046> for background on","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":8006,"byte_end":8080,"line_start":213,"line_end":213,"column_start":1,"column_end":75}},{"value":"/ this particular problem.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":8081,"byte_end":8109,"line_start":214,"line_end":214,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":8110,"byte_end":8113,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ Other memory protection mechanisms are interesting and useful, but often","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":8114,"byte_end":8190,"line_start":216,"line_end":216,"column_start":1,"column_end":77}},{"value":"/ overkill (e.g. defending against RAM scraping or attackers with swap access).","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":8191,"byte_end":8272,"line_start":217,"line_end":217,"column_start":1,"column_end":82}},{"value":"/ In as much as there may be merit to these approaches, there are also many","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":8273,"byte_end":8350,"line_start":218,"line_end":218,"column_start":1,"column_end":78}},{"value":"/ other crates that already implement more sophisticated memory protections.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":8351,"byte_end":8429,"line_start":219,"line_end":219,"column_start":1,"column_end":79}},{"value":"/ Such protections are explicitly out-of-scope for this crate.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":8430,"byte_end":8494,"line_start":220,"line_end":220,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":8495,"byte_end":8498,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ Zeroing memory is [good cryptographic hygiene] and this crate seeks to promote","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":8499,"byte_end":8581,"line_start":222,"line_end":222,"column_start":1,"column_end":83}},{"value":"/ it in the most unobtrusive manner possible. This includes omitting complex","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":8582,"byte_end":8660,"line_start":223,"line_end":223,"column_start":1,"column_end":79}},{"value":"/ `unsafe` memory protection systems and just trying to make the best memory","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":8661,"byte_end":8739,"line_start":224,"line_end":224,"column_start":1,"column_end":79}},{"value":"/ zeroing crate available.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":8740,"byte_end":8768,"line_start":225,"line_end":225,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":8769,"byte_end":8772,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ [Zeroing memory securely is hard]: http://www.daemonology.net/blog/2014-09-04-how-to-zero-a-buffer.html","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":8773,"byte_end":8880,"line_start":227,"line_end":227,"column_start":1,"column_end":108}},{"value":"/ [Unsafe Code Guidelines Working Group]: https://github.com/rust-lang/unsafe-code-guidelines","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":8881,"byte_end":8976,"line_start":228,"line_end":228,"column_start":1,"column_end":96}},{"value":"/ [these remarks have been removed]: https://github.com/rust-lang/rust/pull/60972","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":8977,"byte_end":9060,"line_start":229,"line_end":229,"column_start":1,"column_end":84}},{"value":"/ [good cryptographic hygiene]: https://github.com/veorq/cryptocoding#clean-memory-of-secret-data","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":9061,"byte_end":9160,"line_start":230,"line_end":230,"column_start":1,"column_end":100}},{"value":"/ [`Ordering::SeqCst`]: core::sync::atomic::Ordering::SeqCst","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":9161,"byte_end":9223,"line_start":231,"line_end":231,"column_start":1,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":92},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":9962,"byte_end":9969,"line_start":256,"line_end":256,"column_start":11,"column_end":18},"name":"Zeroize","qualname":"::Zeroize","value":"Zeroize","parent":null,"children":[{"krate":0,"index":93}],"decl_id":null,"docs":" Trait for securely erasing types from memory\n","sig":null,"attributes":[{"value":"/ Trait for securely erasing types from memory","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":9903,"byte_end":9951,"line_start":255,"line_end":255,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":10130,"byte_end":10137,"line_start":259,"line_end":259,"column_start":8,"column_end":15},"name":"zeroize","qualname":"::Zeroize::zeroize","value":"pub fn zeroize(&mut Self)","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" Zero out this object from memory using Rust intrinsics which ensure the\n zeroization operation is not \"optimized away\" by the compiler.\n","sig":null,"attributes":[{"value":"/ Zero out this object from memory using Rust intrinsics which ensure the","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":9976,"byte_end":10051,"line_start":257,"line_end":257,"column_start":5,"column_end":80}},{"value":"/ zeroization operation is not \"optimized away\" by the compiler.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":10056,"byte_end":10122,"line_start":258,"line_end":258,"column_start":5,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":94},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":10261,"byte_end":10274,"line_start":263,"line_end":263,"column_start":11,"column_end":24},"name":"ZeroizeOnDrop","qualname":"::ZeroizeOnDrop","value":"ZeroizeOnDrop","parent":null,"children":[],"decl_id":null,"docs":" Marker trait signifying that this type will [`zeroize`](Zeroize::zeroize) itself on [`Drop`].\n","sig":null,"attributes":[{"value":"/ Marker trait signifying that this type will [`zeroize`](Zeroize::zeroize) itself on [`Drop`].","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":10153,"byte_end":10250,"line_start":262,"line_end":262,"column_start":1,"column_end":98}}]},{"kind":"Mod","id":{"krate":0,"index":95},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":10302,"byte_end":10312,"line_start":266,"line_end":266,"column_start":9,"column_end":19},"name":"__internal","qualname":"::__internal","value":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":99},{"krate":0,"index":102},{"krate":0,"index":104}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":97},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":10408,"byte_end":10427,"line_start":270,"line_end":270,"column_start":15,"column_end":34},"name":"AssertZeroizeOnDrop","qualname":"::__internal::AssertZeroizeOnDrop","value":"AssertZeroizeOnDrop","parent":null,"children":[{"krate":0,"index":98}],"decl_id":null,"docs":" Auto-deref workaround for deriving `ZeroizeOnDrop`.\n","sig":null,"attributes":[{"value":"/ Auto-deref workaround for deriving `ZeroizeOnDrop`.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":10338,"byte_end":10393,"line_start":269,"line_end":269,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":10441,"byte_end":10459,"line_start":271,"line_end":271,"column_start":12,"column_end":30},"name":"zeroize_or_on_drop","qualname":"::__internal::AssertZeroizeOnDrop::zeroize_or_on_drop","value":"pub fn zeroize_or_on_drop(&mut Self)","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":102},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":10664,"byte_end":10677,"line_start":279,"line_end":279,"column_start":15,"column_end":28},"name":"AssertZeroize","qualname":"::__internal::AssertZeroize","value":"AssertZeroize","parent":null,"children":[{"krate":0,"index":103}],"decl_id":null,"docs":" Auto-deref workaround for deriving `ZeroizeOnDrop`.\n","sig":null,"attributes":[{"value":"/ Auto-deref workaround for deriving `ZeroizeOnDrop`.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":10594,"byte_end":10649,"line_start":278,"line_end":278,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":10691,"byte_end":10709,"line_start":280,"line_end":280,"column_start":12,"column_end":30},"name":"zeroize_or_on_drop","qualname":"::__internal::AssertZeroize::zeroize_or_on_drop","value":"pub fn zeroize_or_on_drop(&mut Self)","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":107},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":10948,"byte_end":10963,"line_start":291,"line_end":291,"column_start":11,"column_end":26},"name":"DefaultIsZeroes","qualname":"::DefaultIsZeroes","value":"DefaultIsZeroes: Copy + Default + Sized","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for types whose `Default` is the desired zeroization result\n","sig":null,"attributes":[{"value":"/ Marker trait for types whose `Default` is the desired zeroization result","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":10861,"byte_end":10937,"line_start":290,"line_end":290,"column_start":1,"column_end":77}}]},{"kind":"Trait","id":{"krate":0,"index":152},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":18277,"byte_end":18287,"line_start":518,"line_end":518,"column_start":11,"column_end":21},"name":"TryZeroize","qualname":"::TryZeroize","value":"TryZeroize","parent":null,"children":[{"krate":0,"index":153}],"decl_id":null,"docs":" Fallible trait for representing cases where zeroization may or may not be\n possible.","sig":null,"attributes":[{"value":"/ Fallible trait for representing cases where zeroization may or may not be","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":18024,"byte_end":18101,"line_start":513,"line_end":513,"column_start":1,"column_end":78}},{"value":"/ possible.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":18102,"byte_end":18115,"line_start":514,"line_end":514,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":18116,"byte_end":18119,"line_start":515,"line_end":515,"column_start":1,"column_end":4}},{"value":"/ This is primarily useful for scenarios like reference counted data, where","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":18120,"byte_end":18197,"line_start":516,"line_end":516,"column_start":1,"column_end":78}},{"value":"/ zeroization is only possible when the last reference is dropped.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":18198,"byte_end":18266,"line_start":517,"line_end":517,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":18479,"byte_end":18490,"line_start":523,"line_end":523,"column_start":8,"column_end":19},"name":"try_zeroize","qualname":"::TryZeroize::try_zeroize","value":"pub fn try_zeroize(&mut Self) -> bool","parent":{"krate":0,"index":152},"children":[],"decl_id":null,"docs":" Try to zero out this object from memory using Rust intrinsics which\n ensure the zeroization operation is not \"optimized away\" by the\n compiler.\n","sig":null,"attributes":[{"value":"/ Try to zero out this object from memory using Rust intrinsics which","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":18294,"byte_end":18365,"line_start":519,"line_end":519,"column_start":5,"column_end":76}},{"value":"/ ensure the zeroization operation is not \"optimized away\" by the","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":18370,"byte_end":18437,"line_start":520,"line_end":520,"column_start":5,"column_end":72}},{"value":"/ compiler.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":18442,"byte_end":18455,"line_start":521,"line_end":521,"column_start":5,"column_end":18}},{"value":"must_use","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":18460,"byte_end":18471,"line_start":522,"line_end":522,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":247},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":18692,"byte_end":18701,"line_start":529,"line_end":529,"column_start":12,"column_end":21},"name":"Zeroizing","qualname":"::Zeroizing","value":"","parent":null,"children":[],"decl_id":null,"docs":" `Zeroizing` is a a wrapper for any `Z: Zeroize` type which implements a\n `Drop` handler which zeroizes dropped values.\n","sig":null,"attributes":[{"value":"/ `Zeroizing` is a a wrapper for any `Z: Zeroize` type which implements a","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":18514,"byte_end":18589,"line_start":526,"line_end":526,"column_start":1,"column_end":76}},{"value":"/ `Drop` handler which zeroizes dropped values.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":18590,"byte_end":18639,"line_start":527,"line_end":527,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":18884,"byte_end":18887,"line_start":537,"line_end":537,"column_start":12,"column_end":15},"name":"new","qualname":"<Zeroizing<Z>>::new","value":"pub fn new(Z) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Move value inside a `Zeroizing` wrapper which ensures it will be\n zeroized when it's dropped.\n","sig":null,"attributes":[{"value":"/ Move value inside a `Zeroizing` wrapper which ensures it will be","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":18768,"byte_end":18836,"line_start":535,"line_end":535,"column_start":5,"column_end":73}},{"value":"/ zeroized when it's dropped.","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":18841,"byte_end":18872,"line_start":536,"line_end":536,"column_start":5,"column_end":36}}]}],"impls":[{"id":3,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":10768,"byte_end":10769,"line_start":283,"line_end":283,"column_start":40,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":11012,"byte_end":11013,"line_start":293,"line_end":293,"column_start":21,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":12366,"byte_end":12373,"line_start":354,"line_end":354,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":12527,"byte_end":12533,"line_start":365,"line_end":365,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":14054,"byte_end":14060,"line_start":405,"line_end":405,"column_start":27,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":16202,"byte_end":16205,"line_start":455,"line_end":455,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":17345,"byte_end":17348,"line_start":486,"line_end":486,"column_start":27,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":17474,"byte_end":17477,"line_start":490,"line_end":490,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":17802,"byte_end":17805,"line_start":503,"line_end":503,"column_start":27,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":17930,"byte_end":17936,"line_start":507,"line_end":507,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":18727,"byte_end":18736,"line_start":531,"line_end":531,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":18973,"byte_end":18982,"line_start":542,"line_end":542,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":19193,"byte_end":19202,"line_start":553,"line_end":553,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":19327,"byte_end":19336,"line_start":562,"line_end":562,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":19465,"byte_end":19474,"line_start":573,"line_end":573,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":19591,"byte_end":19600,"line_start":582,"line_end":582,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":19717,"byte_end":19726,"line_start":591,"line_end":591,"column_start":27,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":19768,"byte_end":19777,"line_start":593,"line_end":593,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":21530,"byte_end":21541,"line_start":643,"line_end":643,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":21686,"byte_end":21697,"line_start":647,"line_end":647,"column_start":27,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":21792,"byte_end":21805,"line_start":649,"line_end":649,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":21939,"byte_end":21952,"line_start":653,"line_end":653,"column_start":24,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":10768,"byte_end":10769,"line_start":283,"line_end":283,"column_start":40,"column_end":41},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":105},"to":{"krate":0,"index":102}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":10965,"byte_end":10969,"line_start":291,"line_end":291,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":3026},"to":{"krate":0,"index":107}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":10972,"byte_end":10979,"line_start":291,"line_end":291,"column_start":35,"column_end":42},"kind":"SuperTrait","from":{"krate":1,"index":2994},"to":{"krate":0,"index":107}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":10982,"byte_end":10987,"line_start":291,"line_end":291,"column_start":45,"column_end":50},"kind":"SuperTrait","from":{"krate":1,"index":3021},"to":{"krate":0,"index":107}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":11012,"byte_end":11013,"line_start":293,"line_end":293,"column_start":21,"column_end":22},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":109},"to":{"krate":0,"index":92}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":12366,"byte_end":12373,"line_start":354,"line_end":354,"column_start":25,"column_end":32},"kind":{"Impl":{"id":33}},"from":{"krate":1,"index":10173},"to":{"krate":0,"index":92}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":12527,"byte_end":12533,"line_start":365,"line_end":365,"column_start":21,"column_end":27},"kind":{"Impl":{"id":34}},"from":{"krate":1,"index":43437},"to":{"krate":0,"index":92}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":14054,"byte_end":14060,"line_start":405,"line_end":405,"column_start":27,"column_end":33},"kind":{"Impl":{"id":35}},"from":{"krate":1,"index":43437},"to":{"krate":0,"index":94}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":16202,"byte_end":16205,"line_start":455,"line_end":455,"column_start":21,"column_end":24},"kind":{"Impl":{"id":36}},"from":{"krate":4,"index":7063},"to":{"krate":0,"index":92}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":17345,"byte_end":17348,"line_start":486,"line_end":486,"column_start":27,"column_end":30},"kind":{"Impl":{"id":37}},"from":{"krate":4,"index":7063},"to":{"krate":0,"index":94}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":17474,"byte_end":17477,"line_start":490,"line_end":490,"column_start":21,"column_end":24},"kind":{"Impl":{"id":38}},"from":{"krate":4,"index":313},"to":{"krate":0,"index":92}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":17802,"byte_end":17805,"line_start":503,"line_end":503,"column_start":27,"column_end":30},"kind":{"Impl":{"id":39}},"from":{"krate":4,"index":313},"to":{"krate":0,"index":94}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":17930,"byte_end":17936,"line_start":507,"line_end":507,"column_start":18,"column_end":24},"kind":{"Impl":{"id":40}},"from":{"krate":4,"index":7606},"to":{"krate":0,"index":92}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":18727,"byte_end":18736,"line_start":531,"line_end":531,"column_start":9,"column_end":18},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":247},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":18973,"byte_end":18982,"line_start":542,"line_end":542,"column_start":36,"column_end":45},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":247},"to":{"krate":1,"index":2637}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":19193,"byte_end":19202,"line_start":553,"line_end":553,"column_start":21,"column_end":30},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":247},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":19327,"byte_end":19336,"line_start":562,"line_end":562,"column_start":24,"column_end":33},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":247},"to":{"krate":1,"index":3227}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":19465,"byte_end":19474,"line_start":573,"line_end":573,"column_start":27,"column_end":36},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":247},"to":{"krate":1,"index":3240}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":19591,"byte_end":19600,"line_start":582,"line_end":582,"column_start":21,"column_end":30},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":247},"to":{"krate":0,"index":92}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":19717,"byte_end":19726,"line_start":591,"line_end":591,"column_start":27,"column_end":36},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":247},"to":{"krate":0,"index":94}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":19768,"byte_end":19777,"line_start":593,"line_end":593,"column_start":18,"column_end":27},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":247},"to":{"krate":1,"index":3251}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":21530,"byte_end":21541,"line_start":643,"line_end":643,"column_start":21,"column_end":32},"kind":{"Impl":{"id":49}},"from":{"krate":1,"index":3034},"to":{"krate":0,"index":92}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":21686,"byte_end":21697,"line_start":647,"line_end":647,"column_start":27,"column_end":38},"kind":{"Impl":{"id":50}},"from":{"krate":1,"index":3034},"to":{"krate":0,"index":94}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":21792,"byte_end":21805,"line_start":649,"line_end":649,"column_start":18,"column_end":31},"kind":{"Impl":{"id":51}},"from":{"krate":1,"index":34981},"to":{"krate":0,"index":92}},{"span":{"file_name":"/home/fury/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.0/src/lib.rs","byte_start":21939,"byte_end":21952,"line_start":653,"line_end":653,"column_start":24,"column_end":37},"kind":{"Impl":{"id":52}},"from":{"krate":1,"index":34981},"to":{"krate":0,"index":94}}]}